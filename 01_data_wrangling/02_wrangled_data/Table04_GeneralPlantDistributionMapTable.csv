general_plant_id,distribution_map_html
1,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:1},&quot;memo&quot;:{&quot;id&quot;:&quot;69qUc7Z3doCLBeuU1zDA&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b351b0112eba983337031779d6c36a65b1cb9bb410471ce997f9bca3dc3dd792&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""69qUc7Z3doCLBeuU1zDA"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
2,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:2},&quot;memo&quot;:{&quot;id&quot;:&quot;rpGSUMaaqJNBcS4qO9cm&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d4b644d73636f493aa06cef579128b8980a5aae65763a40b4d47f8b923327056&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""rpGSUMaaqJNBcS4qO9cm"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
3,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:3},&quot;memo&quot;:{&quot;id&quot;:&quot;Gls2FwP8ElzSRj7QE3GY&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;edc98e56af04fa7b42c3dfae329fc398e4f924986a198e599b9b45726e9e7564&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Gls2FwP8ElzSRj7QE3GY"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
4,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:4},&quot;memo&quot;:{&quot;id&quot;:&quot;Ws6QLut07Syy1vxXYi8d&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;5dfec768b5899f41e215f33437f46e6038f19e50982bbb51f3b1a4c43bde4746&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Ws6QLut07Syy1vxXYi8d"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
5,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:5},&quot;memo&quot;:{&quot;id&quot;:&quot;Ya3qzVu4e1TGYZIZIF0R&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b3db52cbb28d42dde437ee4659550c64ab15f852eadc2ef238a44a656bf593d8&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Ya3qzVu4e1TGYZIZIF0R"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
6,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:6},&quot;memo&quot;:{&quot;id&quot;:&quot;ZEeHaDlX1lpQRlQlmEJw&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7dbfd4b4db2bf73c3664f6235fb41c24d2acaf17e394cd701f8bfcd260747e2a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ZEeHaDlX1lpQRlQlmEJw"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
7,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:2,&quot;max&quot;:2},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:7},&quot;memo&quot;:{&quot;id&quot;:&quot;kdoA97HSUB5vF9LCbGOG&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;122246790bafc05eee36f3c29426618d9e0b425dd4356b03268bf78f941c7584&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""kdoA97HSUB5vF9LCbGOG"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 2; x <= 2; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
8,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:8},&quot;memo&quot;:{&quot;id&quot;:&quot;ivbSrk89mBY4I2LbWtzN&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;29871f300d39ca27822c2d20b7aabf8a8a2dafd70bcf10dc025cc7a5f591c842&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ivbSrk89mBY4I2LbWtzN"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
9,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:8,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:9},&quot;memo&quot;:{&quot;id&quot;:&quot;lH4KpHKh1PRnErUJJmKJ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;9fdf41f21d4fc3e3836f08082287e789d7eddc408e3103d09b3266580d6a6582&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""lH4KpHKh1PRnErUJJmKJ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 8; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
10,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:10},&quot;memo&quot;:{&quot;id&quot;:&quot;i3IQrfsYr4Zr8wp9p44b&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;9f1f77f0d5b59c8780a7c830279363f268279c9280b397c8c4f4aee15a26107f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""i3IQrfsYr4Zr8wp9p44b"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
11,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:11},&quot;memo&quot;:{&quot;id&quot;:&quot;Mgr7OEL28fzxwxEzJOxz&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c1c88d2e778d49aef182c94471391bb3b7f830d19666a38f4b3d6cbce7ae6ef2&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Mgr7OEL28fzxwxEzJOxz"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
12,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:2,&quot;max&quot;:2},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:12},&quot;memo&quot;:{&quot;id&quot;:&quot;KxgVw8ytQNR4KfXw1jJ4&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;cbf3b337a3ad2c1d3cdaa0a04b9e988781315ba1ef9953d12b0e5c0c81cbccc0&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""KxgVw8ytQNR4KfXw1jJ4"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 2; x <= 2; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
13,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:13},&quot;memo&quot;:{&quot;id&quot;:&quot;aVSVqCiAP3bVNDoekGRX&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;bf33c8ef266a323d601a17a9248c7fdf626870891d72be1ed956cbe2117c0267&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""aVSVqCiAP3bVNDoekGRX"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
14,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:2,&quot;max&quot;:2},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:14},&quot;memo&quot;:{&quot;id&quot;:&quot;Cbl8VjxLuLIY63BCpLxl&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;83482fd67af7b0d639fe7fb019225959b2ee969df8d3316403553031d687464b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Cbl8VjxLuLIY63BCpLxl"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 2; x <= 2; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
15,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:15},&quot;memo&quot;:{&quot;id&quot;:&quot;2QWPDd4LaKf6SqyJO5fr&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;628a5d513308b757d7c01451529feaa9917dcaf4bc57a3d9080997b45c347125&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""2QWPDd4LaKf6SqyJO5fr"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
16,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:16},&quot;memo&quot;:{&quot;id&quot;:&quot;nvbiD3C51cpjoYiUYEKA&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;716ae4abbe58b401e0a57eb3e02ef6c8861bb7c779aceed3bf2e17d4e7f0702d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""nvbiD3C51cpjoYiUYEKA"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
17,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:17},&quot;memo&quot;:{&quot;id&quot;:&quot;z1hUhp4qDIHcpKDIOyIQ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;2db3da3c8d98ee5b78b3021535103f164c0c7b71c6964e41808344e1c7ebd3bb&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""z1hUhp4qDIHcpKDIOyIQ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
18,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:18},&quot;memo&quot;:{&quot;id&quot;:&quot;WaGQz3eYdLQn23XGjzMv&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;dc5ca135cfdf5cf62098e9250b98b8688000b7065525ceea3c97047a47b1becb&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""WaGQz3eYdLQn23XGjzMv"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
19,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:19},&quot;memo&quot;:{&quot;id&quot;:&quot;837qX0ibvaFpCVxm9Xng&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;92a74f1601f86d170c367292643a64d28e608b29f3611989e14ab13514fe6a89&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""837qX0ibvaFpCVxm9Xng"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
20,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:20},&quot;memo&quot;:{&quot;id&quot;:&quot;MrIS2hE2JA1VWelvIrme&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;699c716329a728c366ba5ccff9611a10b6c71d7eba7d2178427a42a1f040eafc&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""MrIS2hE2JA1VWelvIrme"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
21,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:21},&quot;memo&quot;:{&quot;id&quot;:&quot;vE0lZl2gA1qdS1YM1nqB&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;5cc9873ee0c1fc6e9fa249afb98f046730a952185356fb85446f50e25ae3e92b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""vE0lZl2gA1qdS1YM1nqB"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
22,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:22},&quot;memo&quot;:{&quot;id&quot;:&quot;cP0IxFwzeyaasC3YsOQ2&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;386c0d69188aac9918a77dcc260569ecf15e55fa39bccd5f45dcfd184ae7797f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""cP0IxFwzeyaasC3YsOQ2"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
23,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:23},&quot;memo&quot;:{&quot;id&quot;:&quot;grBtobuSS6DHXxuNwfED&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;14c738dd10af0aee680e16f70f78d69df8f5997953dae6779ad5eff3a6177758&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""grBtobuSS6DHXxuNwfED"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
24,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:24},&quot;memo&quot;:{&quot;id&quot;:&quot;oqOJ7b2YCfb2n4yKUP5z&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;f9323750b663063cc9e2a066b5b6872a9eff0b8ee865e926b834f96dcc824dd2&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""oqOJ7b2YCfb2n4yKUP5z"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
25,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:25},&quot;memo&quot;:{&quot;id&quot;:&quot;Dy63np3bvxnQAe1FpJGD&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;99de81ff5dbc12eb20b489e9e38658e00214de9fa182f8c31724174056a50cc7&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Dy63np3bvxnQAe1FpJGD"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
26,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:26},&quot;memo&quot;:{&quot;id&quot;:&quot;f8vNNEcrQE35cLsl0abD&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;6f50b27724ea8bf2b6ffb48f06400aa4b1499450ed0db7fa6e60a2242c37c8e2&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""f8vNNEcrQE35cLsl0abD"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
27,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:27},&quot;memo&quot;:{&quot;id&quot;:&quot;zoWTUn0UcYQheTuDmOE2&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;85573200adafb0f8512ccbe24033d0bc45954e259efa93fff242ebc4e4741535&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""zoWTUn0UcYQheTuDmOE2"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
28,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:28},&quot;memo&quot;:{&quot;id&quot;:&quot;BhlXfc1NcfWdrhEWVwrv&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;f56c03ca6dea4a26fa07e51a37dd6c9c51a6d5873dc24797c91b88cb299bf8a1&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""BhlXfc1NcfWdrhEWVwrv"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
29,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:29},&quot;memo&quot;:{&quot;id&quot;:&quot;kHopM4iz0ocCy4yMhKng&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7d37b6bccd510827323a7fca007ea575670d2d8dc4bf0cac4562a8a36be8825b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""kHopM4iz0ocCy4yMhKng"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
30,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:30},&quot;memo&quot;:{&quot;id&quot;:&quot;lGV6i1ohWrabGWJegsbU&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;85d2d762c667180a21344e72ed908f4a9d5eab0c96e88ec82154577ad5f1731c&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""lGV6i1ohWrabGWJegsbU"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
31,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:31},&quot;memo&quot;:{&quot;id&quot;:&quot;lHHur38Lou41ouqPaFoP&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ac260c9a982d7039e2fa6552ce1a3057dd23ca5e353ba9bead4d6e93e2f5f4fe&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""lHHur38Lou41ouqPaFoP"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
32,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:32},&quot;memo&quot;:{&quot;id&quot;:&quot;AHLxIGkFX1SuLxBzP5pW&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e866d8b9f737a559105032e29cb8bb846aa7ef9bb91727836bcd2edb06724cb5&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""AHLxIGkFX1SuLxBzP5pW"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
33,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:33},&quot;memo&quot;:{&quot;id&quot;:&quot;ikiZKpt94lVS5LWxOtD3&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;0b564740fb3c4129247d76fa58a7fdcc5f4485e5b636fec1f2ee5981814cc534&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ikiZKpt94lVS5LWxOtD3"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
34,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:34},&quot;memo&quot;:{&quot;id&quot;:&quot;fysAcWgGeW4xJ3Vg0IQJ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a78857e99df70d00eb49f63119d20a47e3be9e598b4a510949b038e9d8e4597a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""fysAcWgGeW4xJ3Vg0IQJ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
35,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:35},&quot;memo&quot;:{&quot;id&quot;:&quot;tT9uJ7Wz95je9vlLof3Y&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;78dbb23b026545f27b23e3959476e78cc9e58530627a7fff62bd86124fea0fec&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""tT9uJ7Wz95je9vlLof3Y"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
36,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:36},&quot;memo&quot;:{&quot;id&quot;:&quot;8aEQWfuYbnqoR6HI2kos&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;2866c2ac86f0a7c059eb67a4755c7cf98d980e8b2321e9676307257438e058a1&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""8aEQWfuYbnqoR6HI2kos"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
37,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:37},&quot;memo&quot;:{&quot;id&quot;:&quot;akB0LsDCowYLEJaw5Ugs&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b12757a1f65fc6f1dfc0f6c18ae95f0e59d4715152d2b177c285bb9ddd599945&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""akB0LsDCowYLEJaw5Ugs"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
38,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:38},&quot;memo&quot;:{&quot;id&quot;:&quot;EdMxXlUas8ksO5QGUX2T&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;987977ea3aa6d38d3be6d4120f8452307d7f33e4333ccac4b25196902f360526&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""EdMxXlUas8ksO5QGUX2T"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
39,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:39},&quot;memo&quot;:{&quot;id&quot;:&quot;O1DG7cai1d2AiLxQK9lA&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a8b98e2ede83d44b4487c4f089ad075f4f80e25e863be1c948f4a20b9d8b7d24&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""O1DG7cai1d2AiLxQK9lA"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
40,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:40},&quot;memo&quot;:{&quot;id&quot;:&quot;ETyLi302yg6GPg97Z4zE&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;6ec1c8d799d80222b6273ca8908d42c656067ca550e27b069ccd53020c643b3b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ETyLi302yg6GPg97Z4zE"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
41,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:41},&quot;memo&quot;:{&quot;id&quot;:&quot;dOimy8f2lAsLnwdInD6Y&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;29a91544edf97be1c977bec58877406906c2abe167481fd30451ba3c658bb570&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""dOimy8f2lAsLnwdInD6Y"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
42,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:42},&quot;memo&quot;:{&quot;id&quot;:&quot;IPJHP9hggS6E1L3aiTuG&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;0baca70000bbd06223acff65edcd42b87fc08faa40bd33abb62d4b5168138adb&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""IPJHP9hggS6E1L3aiTuG"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
43,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:43},&quot;memo&quot;:{&quot;id&quot;:&quot;E6SkSCYKQcSlGsH22KqD&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;fd34f3a2488be1724996485a20ce5c8271168f9db11368e99fa4d3a4dccd03a1&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""E6SkSCYKQcSlGsH22KqD"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
44,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:44},&quot;memo&quot;:{&quot;id&quot;:&quot;Hq9nV0YnVVqpN82DApN9&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;789e9e3c1ce7a00a93a689f887f9b367b471acddb033772c34774aea6c369df1&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Hq9nV0YnVVqpN82DApN9"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
45,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:45},&quot;memo&quot;:{&quot;id&quot;:&quot;VqhaC95Jf10ifFJqcNwX&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a399d8db0b88ebecfa4487fb33f108faf66c7d83ce6ed67c7565a86ec5c15821&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""VqhaC95Jf10ifFJqcNwX"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
46,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:46},&quot;memo&quot;:{&quot;id&quot;:&quot;6zmE8C0mFSElp0EVpgSa&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;84cf24eef9a37d9e59cc1fa0722527276f40b9a46ff164712689f0f999f1c780&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""6zmE8C0mFSElp0EVpgSa"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
47,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:47},&quot;memo&quot;:{&quot;id&quot;:&quot;HpeCLbNJgyMG3WHUuFPy&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b2379451fe4228998c1abfcb14c8007d4f79d993c69ce4afd5dd0a4a372c8ed0&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""HpeCLbNJgyMG3WHUuFPy"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
48,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:48},&quot;memo&quot;:{&quot;id&quot;:&quot;RykSkCvJYivGpduWgaub&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;55ac503b5ca582304cff800345d76bc39cbbe923dfd85b11733fec38e6ba87e9&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""RykSkCvJYivGpduWgaub"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
49,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:49},&quot;memo&quot;:{&quot;id&quot;:&quot;KcFL9p5V5uYAu7X4YuuM&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1fa485b7761eac79260681ac4f082cb0907a959e37f98e2d389331d37eeb8811&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""KcFL9p5V5uYAu7X4YuuM"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
50,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:50},&quot;memo&quot;:{&quot;id&quot;:&quot;yeHfLpjGxJF77RGAfIuB&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;3a526b3afd7f8e5d625966fda96b526ee910614db22f1cb5c6d736ca8de8d0e4&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""yeHfLpjGxJF77RGAfIuB"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
51,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:51},&quot;memo&quot;:{&quot;id&quot;:&quot;Sbc16lZNcSp0GWiPZZHP&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e3e2aef5ab186e39d51d56c56abed8ec4b42e25029df3371fbfbe7e995355fe3&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Sbc16lZNcSp0GWiPZZHP"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
52,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:52},&quot;memo&quot;:{&quot;id&quot;:&quot;spxgdHUNcaFo20TmCXJ3&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;87141b32944efa09c2144a9a936f76f63febab889d1737bd334647de31fafe20&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""spxgdHUNcaFo20TmCXJ3"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
53,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:53},&quot;memo&quot;:{&quot;id&quot;:&quot;9wj2xdJGp2X7fHhLPlvr&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;04d8fe8a4281ba36305007bcf7cf270070437e04098dab7e60b91580f5d95fdf&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""9wj2xdJGp2X7fHhLPlvr"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
54,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:54},&quot;memo&quot;:{&quot;id&quot;:&quot;8KC9C5y4lf8eDSfXkHpq&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1aeb3077c219a3bcb57c8638811b84073b7193cb1232a497ffb95c80d58304f2&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""8KC9C5y4lf8eDSfXkHpq"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
55,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:55},&quot;memo&quot;:{&quot;id&quot;:&quot;CPh3VCV4QpU7UALcX5lv&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;de49c0eae55f6c78d2777a4f14e7352f15d02a73f04ef0ed55c310ded149df44&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""CPh3VCV4QpU7UALcX5lv"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
56,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:56},&quot;memo&quot;:{&quot;id&quot;:&quot;7CJaQ11xw41h2kxiDFOm&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;cc5286cd15f92f470d53750b830aee9f9c3c0efd6533140bec19caeae66a0c55&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""7CJaQ11xw41h2kxiDFOm"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
57,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:57},&quot;memo&quot;:{&quot;id&quot;:&quot;mhdjfdyUd6t4krtD7Pvg&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;4aa1e54a0f24811db10eaf73b81b79b97bc1b74cd5fb8b736bf4d97618f07d53&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""mhdjfdyUd6t4krtD7Pvg"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
58,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:58},&quot;memo&quot;:{&quot;id&quot;:&quot;1fWrH5c5Cb2s7Sm5P4C0&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b02f37e2745fee7a979b6441096f769d2bda7b69401f3d1e8555d4c424dc150a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""1fWrH5c5Cb2s7Sm5P4C0"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
59,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:59},&quot;memo&quot;:{&quot;id&quot;:&quot;eqHJNChrrd9NxNMXVr8x&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;5cdb9873b1d4ee4bfa0ae61d927e927e6bbe30886dbf217ee50296f216b122ad&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""eqHJNChrrd9NxNMXVr8x"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
60,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:60},&quot;memo&quot;:{&quot;id&quot;:&quot;Yb8NqtmgRAwcIyHXGt6a&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;79122a2d7db039f8f1121935906d5d6471170b692b46ccb2bd5b0d8d56faeb62&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Yb8NqtmgRAwcIyHXGt6a"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
61,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:61},&quot;memo&quot;:{&quot;id&quot;:&quot;KUGGUxj4m1s8IxwhUn4x&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;0a157c556570135b05f14c1da00b11f23ae5b6f3baca744077cfbbafe964ca6c&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""KUGGUxj4m1s8IxwhUn4x"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
62,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:62},&quot;memo&quot;:{&quot;id&quot;:&quot;C7cldGP7owBL5CEBkvSM&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;80c6b222e9d7b5257baf85efcd4e486130c018f2cc144682865c68c8c012c075&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""C7cldGP7owBL5CEBkvSM"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
63,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:63},&quot;memo&quot;:{&quot;id&quot;:&quot;L3Lon1eg8dVTNXjXreFy&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1d2165540eb919263f003ac38de79ce070d9f5d9df89d7d2c31d29d963ed9b95&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""L3Lon1eg8dVTNXjXreFy"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
64,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:64},&quot;memo&quot;:{&quot;id&quot;:&quot;2d4vw9CDgXfNjpdl8lSu&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;2d1c41ac8facccff19775793ee7f2e20c6d73c2cc5edfe1f0aeb69ae457be62a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""2d4vw9CDgXfNjpdl8lSu"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
65,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:65},&quot;memo&quot;:{&quot;id&quot;:&quot;jyuUEc56fYOlk1muBi22&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;acd1951f53c635a1f7a7879e473c56f7da84c92e19092d2d726a47c597927a14&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""jyuUEc56fYOlk1muBi22"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
66,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:66},&quot;memo&quot;:{&quot;id&quot;:&quot;ERRKCijVcjxLsmM5miGi&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;bbd299eba1b0e60890fcf9c2c2ea6be1b51e8aaeb5009f459103bee5f63f6721&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ERRKCijVcjxLsmM5miGi"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
67,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:67},&quot;memo&quot;:{&quot;id&quot;:&quot;ogimw3GunjJySjMBkVab&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b8abff2cd32f990712fb7f1953753e87e6b8e21928ebf5c671289804b0c0ad58&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ogimw3GunjJySjMBkVab"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
68,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:68},&quot;memo&quot;:{&quot;id&quot;:&quot;bjuGsjiuGCxGVsfCSxLb&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;569ecd19a3d0bc8527ac1509678356e635ef497f0c10cb1f51ac5402effd39a9&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""bjuGsjiuGCxGVsfCSxLb"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
69,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:69},&quot;memo&quot;:{&quot;id&quot;:&quot;P5POd0QJgqd5cgiwiXCQ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;506d110424de6be8bff24a90fce79a60e103bbcb83c66182767a1eb76c8f5361&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""P5POd0QJgqd5cgiwiXCQ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
70,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:70},&quot;memo&quot;:{&quot;id&quot;:&quot;f9hb5Wf9pdlODH67GKro&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;2637949a48d2d86292fa0cdb2b82d82f6c2abf0d8ecc03651a80d2884266b65f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""f9hb5Wf9pdlODH67GKro"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
71,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:71},&quot;memo&quot;:{&quot;id&quot;:&quot;m3xVPPENBEmwBAwb7Tyo&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;75756b2196ceddf3d77488516f267787937282614baa50bd396f9bebc8b7a3a3&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""m3xVPPENBEmwBAwb7Tyo"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
72,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:72},&quot;memo&quot;:{&quot;id&quot;:&quot;66C9QAMVuzfU7SQlvNue&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;51ed664c47fa3953d543ec9b90b4e415b3478fa4dc866cc6db40d465c85e5cf8&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""66C9QAMVuzfU7SQlvNue"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
73,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:73},&quot;memo&quot;:{&quot;id&quot;:&quot;mqBiImhgnXmo6I8AWdf1&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ce56b487c55f0cb9e897aa7a9a612b6b0c10c084960cc010aefbffabde7de9e2&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""mqBiImhgnXmo6I8AWdf1"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
74,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:74},&quot;memo&quot;:{&quot;id&quot;:&quot;hsUxIZJw7VXfK5sV1fUd&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;487cb3df4a906a9b02b76c795d6b496849c4cd4bcf6ed6eb5d8deb222b599136&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""hsUxIZJw7VXfK5sV1fUd"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
75,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:75},&quot;memo&quot;:{&quot;id&quot;:&quot;664ehLUQT4GSXXMe2lTW&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7a0ae96b76481cae2cc2ddad5368ecfbe69dfd3b50969353707c6516dcb2bfa9&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""664ehLUQT4GSXXMe2lTW"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
76,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:76},&quot;memo&quot;:{&quot;id&quot;:&quot;Mmfdf4V14iD9APQfnAfz&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;802f79f0e507da260470310827d16652424381e43fa840935020f9b217d1f72d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Mmfdf4V14iD9APQfnAfz"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
77,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:77},&quot;memo&quot;:{&quot;id&quot;:&quot;YGJSNZOi4ZlpLvhfkHzQ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e2b3a253591b525ba02b6a12d8eb6e818d549cc36f39ca88155a7cb73dbef89f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""YGJSNZOi4ZlpLvhfkHzQ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
78,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:78},&quot;memo&quot;:{&quot;id&quot;:&quot;htSOpATJOS6119jVvXjT&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;264456e3ab00c979f58647e9d4975cbae43f99297a5a31f522fd6d6cfc8a29e1&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""htSOpATJOS6119jVvXjT"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
79,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:79},&quot;memo&quot;:{&quot;id&quot;:&quot;7VRRdomHkf7qnEqPVxQr&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;4dc39d21bec944f694471e9e260ceca5989d213404b8f3c5d2617f9c04f8f368&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""7VRRdomHkf7qnEqPVxQr"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
80,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:80},&quot;memo&quot;:{&quot;id&quot;:&quot;KF8ptxfQsjXCKVIcpkUr&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ccf30210f0c494c6e2d2f8a048b76b751bde73137775e5a1d80d1364d54c75a8&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""KF8ptxfQsjXCKVIcpkUr"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
81,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:81},&quot;memo&quot;:{&quot;id&quot;:&quot;W85PTZpAzScRJ0fLgwf8&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;bab8b1f516c9fdd031c8159bac96842e8eca5b686875e41b27c42df00e3bc70d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""W85PTZpAzScRJ0fLgwf8"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
82,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:82},&quot;memo&quot;:{&quot;id&quot;:&quot;tQHGudQRrNPjwNM2NsI9&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;9e436b1116ab213407c59bf32f28df5e11ead7c32c22384e1a3ed5b820a456fe&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""tQHGudQRrNPjwNM2NsI9"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
83,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:83},&quot;memo&quot;:{&quot;id&quot;:&quot;e5iuUedMHZ2JiWDjLUNm&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;f55bf4bb7436ca4a1f2901e1b4096a65b6fbbe8fb58a0bbdf389426f03512d81&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""e5iuUedMHZ2JiWDjLUNm"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
84,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:84},&quot;memo&quot;:{&quot;id&quot;:&quot;SgE6xrxkNQdzkRlL2UEr&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e9df5464b2a36cdf7b2679511b4567a770811f0c6e590f102a46b13fbc6ce7a6&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""SgE6xrxkNQdzkRlL2UEr"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
85,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:85},&quot;memo&quot;:{&quot;id&quot;:&quot;xQhw4hdCqRFMNWsby6sV&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ccecc079202f9d6e520ff3819a13e1a7cf9dd98f0d3f2c5c6dd05d091d126ff6&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""xQhw4hdCqRFMNWsby6sV"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
86,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:86},&quot;memo&quot;:{&quot;id&quot;:&quot;9yjjf5TGnPrTy1YKsvnI&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;8eb7bd2c436e9ed49907b9bc6b17b43c12b9acaa548513909bf6e04b88c81639&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""9yjjf5TGnPrTy1YKsvnI"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
87,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:87},&quot;memo&quot;:{&quot;id&quot;:&quot;ipUDct0fx7okaeAy0ekJ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e297b91ba2caf5b63aa66f82fce8b60abdd7d29d7241b0ff55d50f175552177e&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ipUDct0fx7okaeAy0ekJ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
88,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:88},&quot;memo&quot;:{&quot;id&quot;:&quot;dy6rP4jbgto38LMHu7uK&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;cadc31981b6a09f5fe2d9fee4f2bf97517f2737e8e0f73f957c28e35d646a67d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""dy6rP4jbgto38LMHu7uK"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
89,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:89},&quot;memo&quot;:{&quot;id&quot;:&quot;0CDeZERi4wedgVTCYkL7&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ba9f1b88c6e45760af8088a9a9e552af9b93c040fb22b27e2c7c3969dd4fedf2&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""0CDeZERi4wedgVTCYkL7"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
90,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:90},&quot;memo&quot;:{&quot;id&quot;:&quot;3wjE0ocZhvg0Kn2BArWf&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d13df8a31fc5c33078ddec5158fb7d9a6bf668a6668523a68a6b3ee3ff849280&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""3wjE0ocZhvg0Kn2BArWf"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
91,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:91},&quot;memo&quot;:{&quot;id&quot;:&quot;4lwrZ9jRledNpTFDrPPy&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c8f3afd881a6def8b278b8f1f3836afe469edfda03a07bd289a5d12fc9aded61&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""4lwrZ9jRledNpTFDrPPy"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
92,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:92},&quot;memo&quot;:{&quot;id&quot;:&quot;C7xIUoXSxF85E9tphAxE&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c3d1f408052ed1ba0dc9b8b2a853078b180e1df20fcbf0e1c235819028270b3d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""C7xIUoXSxF85E9tphAxE"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
93,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:93},&quot;memo&quot;:{&quot;id&quot;:&quot;8iXESHSi3ffY7S7vnkrW&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a3cc72b2efdf6205dee1b44592b8f9ff8e99a9ae0ec5d4d11889fb262101bb07&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""8iXESHSi3ffY7S7vnkrW"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
94,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:94},&quot;memo&quot;:{&quot;id&quot;:&quot;Zl1HMhapIpyOywx0DR6v&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b64740d9c92c0d5b011da2ed53be219107760c5ca6ba0f925aeca2e37b36ecab&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Zl1HMhapIpyOywx0DR6v"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
95,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:95},&quot;memo&quot;:{&quot;id&quot;:&quot;E42auCC0gew3vj7MpjYJ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7e026ece1eca2c07cd038883c44956285433a8d11d338ad348d11d1da3a86acc&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""E42auCC0gew3vj7MpjYJ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
96,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:96},&quot;memo&quot;:{&quot;id&quot;:&quot;V96Ve4kMIiGmdLgoF1Pz&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;08109a674a41b6f53d04339bd11e99be66f12c11f185777bf15fa89d59b48275&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""V96Ve4kMIiGmdLgoF1Pz"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
97,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:97},&quot;memo&quot;:{&quot;id&quot;:&quot;N7DtumjEbsJXfcaRufMF&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;9a4233cf315caf8747b2c0dacc9e261ccb7b83385283db3b21643eae524776c5&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""N7DtumjEbsJXfcaRufMF"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
98,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:98},&quot;memo&quot;:{&quot;id&quot;:&quot;4zg66ycVIGX6eMP98hHV&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1e7d39fa36a646231f3945ee0e9cb1bd73cf4cfd68bd3b18270474429c436c3c&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""4zg66ycVIGX6eMP98hHV"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
99,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:99},&quot;memo&quot;:{&quot;id&quot;:&quot;BPVFGht8dAlkyyXAO5cF&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;013e9ef40fe55920c99edc9f43bba870320e8926edcdc00653206b07347c22f5&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""BPVFGht8dAlkyyXAO5cF"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
100,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:100},&quot;memo&quot;:{&quot;id&quot;:&quot;8dWySchHu5mbgyuCgaxh&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;28408f183a965c22ea1a6462e7c9026c59470f6eca0ecff0b42d9021aadbff49&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""8dWySchHu5mbgyuCgaxh"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
101,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:101},&quot;memo&quot;:{&quot;id&quot;:&quot;QQBZ0YitV41sc9eoTgU0&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a12381cec4135ab31867fdb14165eb6ad12390f54e59c49124c1ae49d6ba03ce&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""QQBZ0YitV41sc9eoTgU0"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
102,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:102},&quot;memo&quot;:{&quot;id&quot;:&quot;XntKoouCKfhVKGu4dD43&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;782244fa7f4214aa102c5027ea7d1cec8c754da8418eb1fd6d81e8083690a55b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""XntKoouCKfhVKGu4dD43"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
103,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:103},&quot;memo&quot;:{&quot;id&quot;:&quot;Pjowg2RCQaMLwxI94im0&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7cba14ee14328130d03551611173f7866301766bd10529c413cf1ba9dc536ecf&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Pjowg2RCQaMLwxI94im0"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
104,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:104},&quot;memo&quot;:{&quot;id&quot;:&quot;Rsgz6dEe3yOpF6jBWfeB&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;9405fdb6b0c8581e32bb32e796f1428f2b160d08ae7fbe8595c445d1781547fb&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Rsgz6dEe3yOpF6jBWfeB"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
105,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:105},&quot;memo&quot;:{&quot;id&quot;:&quot;g7hzX3guHZZbNSJJKoPA&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ab8d1d101b29f917c688b43b2dafd309365758a812ba1453a056da49e817fa71&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""g7hzX3guHZZbNSJJKoPA"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
106,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:106},&quot;memo&quot;:{&quot;id&quot;:&quot;EDqHFRdwU73xdhCYVRQZ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;595a331a396d53d2d52b10389ec3abcaf5d98237bc081ec0f87cf33edc2da6df&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""EDqHFRdwU73xdhCYVRQZ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
107,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:107},&quot;memo&quot;:{&quot;id&quot;:&quot;k7sqEOLGZygiUZ9BsGJQ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b588b42d6152e47f7ba58a97fd7c6946e2afc54195742eff12915a92de7027e3&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""k7sqEOLGZygiUZ9BsGJQ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
108,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:108},&quot;memo&quot;:{&quot;id&quot;:&quot;b9idE88RE1ahZwuVbJGg&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;11ac34a4d6865f74fc7dc097d867eb7819b58c8f6205e1b7f131437825d8c0eb&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""b9idE88RE1ahZwuVbJGg"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
109,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:109},&quot;memo&quot;:{&quot;id&quot;:&quot;Si3Q64tblVU52NzkQQxv&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;533233fa1faf78ad0705543c8423b7b6051b348b56c3be1b02ebe0550fb5a515&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Si3Q64tblVU52NzkQQxv"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
110,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:110},&quot;memo&quot;:{&quot;id&quot;:&quot;gvaMmRMVvdPfzqMW45Mr&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b1fb6526e5aefb789275e16d95cdc31fd47721cf5d6253c6a3508e1bcc87dc17&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""gvaMmRMVvdPfzqMW45Mr"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
111,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:111},&quot;memo&quot;:{&quot;id&quot;:&quot;Kdbez3T3a23jtVsz08Y2&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ad0c132352c96ff0a22b198a939c17101a9170b96a3b2ad559db64387507557b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Kdbez3T3a23jtVsz08Y2"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
112,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:112},&quot;memo&quot;:{&quot;id&quot;:&quot;g1voJhhJSxpFBklCmZY1&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;8c3bf6fbe9c6d13a73ac2ad6d76193d33541d31874d316a381ac60510511a232&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""g1voJhhJSxpFBklCmZY1"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
113,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:113},&quot;memo&quot;:{&quot;id&quot;:&quot;GloinZEVIxhOcSa1sUo4&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;152618ad1b772fe5b8068497b746ec1979d3983bbcad7d36ac97f0dcd9b96349&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""GloinZEVIxhOcSa1sUo4"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
114,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:114},&quot;memo&quot;:{&quot;id&quot;:&quot;KKXjVhDW1s2EghlPyTRO&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c5d074dcac707da5c6ce7200d3be1d0ab26794e8f9952068ad07bd3ba3dd6017&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""KKXjVhDW1s2EghlPyTRO"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
115,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:115},&quot;memo&quot;:{&quot;id&quot;:&quot;cqVkZDp7b11q85Mi0aUF&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;72b77b85f970c6ef3c7939de34c802620c575661a3684a76ba40168ef92c47f3&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""cqVkZDp7b11q85Mi0aUF"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
116,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:116},&quot;memo&quot;:{&quot;id&quot;:&quot;3BoMPqiqmdAs66f4znr1&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;be5557a75a6865f2d120a0ab0edbd776303afb02c127b701aea2ff22c5cca6e7&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""3BoMPqiqmdAs66f4znr1"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
117,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:117},&quot;memo&quot;:{&quot;id&quot;:&quot;CY3tEjAalHdI0BY8oL9V&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;fb8d29d3f28f3bf25dbadf3a0e1aaafedb57601511283f191d3332c661365238&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""CY3tEjAalHdI0BY8oL9V"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
118,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:118},&quot;memo&quot;:{&quot;id&quot;:&quot;s5NjL7bOURGgJCt4hvt4&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;bc234ee1fc925e3d6abc1458af0455f6d0df5ab26dcdd12faa77c400e74e4a6f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""s5NjL7bOURGgJCt4hvt4"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
119,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:119},&quot;memo&quot;:{&quot;id&quot;:&quot;MJPXqEZRCT0z3lV26kqB&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;93e2ed3b04855adfedeeac7efbef11ed14b36ea7fbdbe5abc4cffb14802950b4&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""MJPXqEZRCT0z3lV26kqB"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
120,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:120},&quot;memo&quot;:{&quot;id&quot;:&quot;RqlAauZoNIwnvmzzLpem&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;46294bc46089f00654ab6a364efafe21316b0a18be8c7421839af8be12a0f24c&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""RqlAauZoNIwnvmzzLpem"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
121,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:121},&quot;memo&quot;:{&quot;id&quot;:&quot;bSadtoMxANUKfjrarmWJ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c6d9eba6ed7607515bc26f77ee7645a926406a33fe8de075343ed10e3c0762bc&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""bSadtoMxANUKfjrarmWJ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
122,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:122},&quot;memo&quot;:{&quot;id&quot;:&quot;8L9uTLVwYuUdz35bX7RX&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;4ef39c9e3c0ef5946432a48afbc3f56f51585daa16c3df1db0dd82c6b659de9b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""8L9uTLVwYuUdz35bX7RX"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
123,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:123},&quot;memo&quot;:{&quot;id&quot;:&quot;3aoR5ICCpyd8WaX1eJBB&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;6c042459341a5883cc396ac3da08ad447e7067634123852c76c58edd37223f11&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""3aoR5ICCpyd8WaX1eJBB"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
124,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:124},&quot;memo&quot;:{&quot;id&quot;:&quot;EqscaL8uDpBHzMgd6A1v&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;5b40b8be5cbb34ef78f65f384a5ed7db71632dfdcfc24d22f9df123148c4d63a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""EqscaL8uDpBHzMgd6A1v"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
125,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:125},&quot;memo&quot;:{&quot;id&quot;:&quot;28xWc2gl0ZvvaAEhHDJP&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b5f8866758275ac95aa43d69b7c0e8241376b9a1332eb516233349ad0a9fd1cd&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""28xWc2gl0ZvvaAEhHDJP"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
126,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:126},&quot;memo&quot;:{&quot;id&quot;:&quot;M6wlmOggP9z4WNe24vPj&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;5a3bf130f82544d4144431d5f0bc08e62eed2c6f902fcc3f54ab5ff4af9bccec&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""M6wlmOggP9z4WNe24vPj"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
127,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:127},&quot;memo&quot;:{&quot;id&quot;:&quot;3zlo3agGRED7bulSQ67K&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b1590817b6b8278f7048a1773eec2d8b22dbbc769c542e2395eba62134ce04b2&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""3zlo3agGRED7bulSQ67K"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
128,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:128},&quot;memo&quot;:{&quot;id&quot;:&quot;Pa9ms9ftm6NeGr6wH8sh&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;4a1c7d040475dd6e58d4fec5e26379b9e1731779a3351f4ed70a3f0f1d0b52d7&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Pa9ms9ftm6NeGr6wH8sh"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
129,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:129},&quot;memo&quot;:{&quot;id&quot;:&quot;bMRocdmDXiTTOMwvNJK3&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;97238b5b608a0b346e4b0ff6522136ff96b7f4cfde749492d658db3515d834b6&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""bMRocdmDXiTTOMwvNJK3"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
130,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:130},&quot;memo&quot;:{&quot;id&quot;:&quot;ZCPqzG0hSPVGHOFFcB0a&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c0c499b6a384cb5a08b0fd2e50695596b7087e25186958b069aabdb65d6238c2&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ZCPqzG0hSPVGHOFFcB0a"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
131,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:131},&quot;memo&quot;:{&quot;id&quot;:&quot;v96lBjGRV0mResjkghzE&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a1b0cee8262259131a9f51cdc62365242f0f33349d50afc34a33369e30639f8c&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""v96lBjGRV0mResjkghzE"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
132,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:132},&quot;memo&quot;:{&quot;id&quot;:&quot;8HxsYb4DoYcyHwbRTYdN&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;da6bdf8a1f7ea2f9f3bfb7bca672088a24578bbf90303adc05abb883b5708d44&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""8HxsYb4DoYcyHwbRTYdN"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
133,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:133},&quot;memo&quot;:{&quot;id&quot;:&quot;RpguYSfqtxl9No1zZ56n&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;223b8431cf5dcd9fd6a354a46239e160e2ba814a0f7c40587cb87fe56036f434&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""RpguYSfqtxl9No1zZ56n"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
134,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:134},&quot;memo&quot;:{&quot;id&quot;:&quot;zznV00Yni8h1DqLkNU5E&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;02f266e627ee393f6ef1e859147702c4b1f8e8ee72fc0c1228d581c5d3352b47&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""zznV00Yni8h1DqLkNU5E"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
135,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:135},&quot;memo&quot;:{&quot;id&quot;:&quot;nSAigSQu6gcqsewpOLe7&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;dff8f8622b8386980c30e418ec9fb1a9834799c339dbc660af04adb0dcf18232&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""nSAigSQu6gcqsewpOLe7"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
136,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:136},&quot;memo&quot;:{&quot;id&quot;:&quot;Z6OBBESVhIv2s3rmXDuR&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;3df4b37e77ecc840f366e05b9d293ca56abc74fc89e732cbbaa9024c1e24a3c1&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Z6OBBESVhIv2s3rmXDuR"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
137,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:137},&quot;memo&quot;:{&quot;id&quot;:&quot;xmpNNbWx9Vi9HyWVXdu3&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;af7bf9bfda3c3a11e0f85d2485048dc2a952fd23f1e3a7ad198b8d0691dae5bb&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""xmpNNbWx9Vi9HyWVXdu3"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
138,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:138},&quot;memo&quot;:{&quot;id&quot;:&quot;ey2xrB8eLNLb2AsQhki1&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;8208c64a5bae8e44c59faac92036d85a3fe7dac2dc8f5bd53b9bd7646b8adbdf&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ey2xrB8eLNLb2AsQhki1"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
139,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:139},&quot;memo&quot;:{&quot;id&quot;:&quot;QjToA0HDy0LHxm4QxInS&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;28889e3476df9f4b1dbe92028d76c7cc23dee9449de87da07befe9715949676b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""QjToA0HDy0LHxm4QxInS"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
140,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:140},&quot;memo&quot;:{&quot;id&quot;:&quot;q5eLXa1FkO2eoSfRNqmf&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;4385ba246a33645de551a24ada6a0633c65b1f7ed403ee518ea4a65a69450ee8&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""q5eLXa1FkO2eoSfRNqmf"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
141,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:141},&quot;memo&quot;:{&quot;id&quot;:&quot;rm2kENtG6jDyLj4ECVEl&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;93ff7cfe5759667b67748d9592c7369209f80c80c0c2aa8b182958c97484dc2d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""rm2kENtG6jDyLj4ECVEl"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
142,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:142},&quot;memo&quot;:{&quot;id&quot;:&quot;yKnGPZrDwJv2sHcpvUns&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;f910170bb23297c29159cf8173a29aaa11772e97faa30830a6ab80309afffd13&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""yKnGPZrDwJv2sHcpvUns"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
143,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:143},&quot;memo&quot;:{&quot;id&quot;:&quot;D8g2kuzLmEIFvS6YEb2C&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;75a5fbbb8f5bdb4ed40e3cd442be5643c62e624b8706e6022e9af1f54d587b84&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""D8g2kuzLmEIFvS6YEb2C"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
144,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:144},&quot;memo&quot;:{&quot;id&quot;:&quot;UWXGQOFmthfrHAByM23E&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;354832e8f838246e2c7e23797999689ff067295439147bd5a4ef969b399fcca8&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""UWXGQOFmthfrHAByM23E"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
145,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:145},&quot;memo&quot;:{&quot;id&quot;:&quot;rQkygKBhhWcz5mUzhRr8&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;526e19324d6b54e313358c3745b63e688812031861cdef1a949bfe91b8b3fcbf&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""rQkygKBhhWcz5mUzhRr8"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
146,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:146},&quot;memo&quot;:{&quot;id&quot;:&quot;JbBQDr8fiF4IQMMIok35&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;41c55ab218da5e6981f08165cad3d688259aa0f62d05372ce505363c12b419de&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""JbBQDr8fiF4IQMMIok35"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
147,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:147},&quot;memo&quot;:{&quot;id&quot;:&quot;ZfOdvXbtJJABcRyKmYKe&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ca747f4f65671db6cc5226d6ddbffa60da275e2cc7162562e52a477b7a060dfc&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ZfOdvXbtJJABcRyKmYKe"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
148,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:148},&quot;memo&quot;:{&quot;id&quot;:&quot;PnzlmVp7qzsJojK42e2I&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;3e9a6d4e10159e904e9b3aa6f5b9e5475be5cdfce5b356ff27f744a5c79a2e78&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""PnzlmVp7qzsJojK42e2I"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
149,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:149},&quot;memo&quot;:{&quot;id&quot;:&quot;ZDoj5hljM9sbwy6es9yh&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;83473cdfe999c0c5c3a71a303dde5889deff1efcb01e74fb459b9e49763cfd08&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ZDoj5hljM9sbwy6es9yh"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
150,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:150},&quot;memo&quot;:{&quot;id&quot;:&quot;UCK8oaUaoNDKUuRFrIwo&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;434e31d9e9084726162e4ac477ded22ccd3b243bb05120639bccff49065229be&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""UCK8oaUaoNDKUuRFrIwo"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
151,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:151},&quot;memo&quot;:{&quot;id&quot;:&quot;abt8Poz7EiZnwjc5nKcl&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a926da78100a0e3fe451ebe76a91aa82cd51e8b8e64a8c41016764c0b15a0cc6&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""abt8Poz7EiZnwjc5nKcl"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
152,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:152},&quot;memo&quot;:{&quot;id&quot;:&quot;mcEOBWuq3jzUvRqseopC&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ea64edab452ef250d5ece5229f82f60cc1c4799a742d75e65f08f73a3bf47a9b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""mcEOBWuq3jzUvRqseopC"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
153,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:153},&quot;memo&quot;:{&quot;id&quot;:&quot;4nvucEgiEh09Fe1BedHJ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a72ea1f580aae414e6f0c6e7d5968b8d72338dabe3253dffada4403b51f3bf3b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""4nvucEgiEh09Fe1BedHJ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
154,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:154},&quot;memo&quot;:{&quot;id&quot;:&quot;vfMSHlgMna4YdOnHKfUY&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;cbb6daa5908d035d6874e2d542adc95f04e0ba086851ba5002c4606861a0a841&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""vfMSHlgMna4YdOnHKfUY"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
155,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:155},&quot;memo&quot;:{&quot;id&quot;:&quot;WD5X9Ca3CYHhxtlJ3v7B&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;f16253ef884fe7cdf17adfc5d87f3da38c05ccb2977d958cc0009bae50a89dc5&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""WD5X9Ca3CYHhxtlJ3v7B"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
156,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:156},&quot;memo&quot;:{&quot;id&quot;:&quot;C50nLRZFgUpVsWCuJbXq&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;8831580f24c9eba12f93e05f9062b6b13858e26d75dacca3f8150061cb132767&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""C50nLRZFgUpVsWCuJbXq"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
157,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:157},&quot;memo&quot;:{&quot;id&quot;:&quot;kHot79RGxfmbI4hPBEOg&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;71d57922ac45c49a19eb836100cdbee347b31abfd1c50803e0a0691279939570&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""kHot79RGxfmbI4hPBEOg"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
158,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:158},&quot;memo&quot;:{&quot;id&quot;:&quot;No9rWvZ3sCPhCbr9z45L&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;66da6247e33a6bc6ce48763e72b295f4078b51d28efefc37704cf5e1a3514a53&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""No9rWvZ3sCPhCbr9z45L"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
159,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:159},&quot;memo&quot;:{&quot;id&quot;:&quot;93b04kv5t0KyZ6NOzGtq&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d9a17a53d81935270b25b279fb117633602329c1b5db8f4cb7935297df39a841&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""93b04kv5t0KyZ6NOzGtq"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
160,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:160},&quot;memo&quot;:{&quot;id&quot;:&quot;ZCUZFqUPt5GK7ripRxsM&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;f2a5b5cf06743e36713e51ee73638ba41338c08d3767779563fb3baeb558fa83&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ZCUZFqUPt5GK7ripRxsM"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
161,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:161},&quot;memo&quot;:{&quot;id&quot;:&quot;JoPk2MkujjlOLDVHTX67&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a54323f26802bd34471d92353b51f433bdb0b011d07fcee20039e7ea7fdb1803&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""JoPk2MkujjlOLDVHTX67"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
162,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:162},&quot;memo&quot;:{&quot;id&quot;:&quot;VJphwJYQLPYsIrmkKl3r&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;24b803687982cfe2b04b4bd3f5d3ff945e3af91d5d2362d31d86cca94daa48c1&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""VJphwJYQLPYsIrmkKl3r"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
163,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:163},&quot;memo&quot;:{&quot;id&quot;:&quot;zqRGMNmvzQQklUnzu6XY&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1d509ed6a81459cd59befebbfa44804d1546d94afa42e9d59bc3c761dc889948&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""zqRGMNmvzQQklUnzu6XY"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
164,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:164},&quot;memo&quot;:{&quot;id&quot;:&quot;nApQmivAKdgJneJqyerr&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;3f83eac5f6ad9a42e9251e680c8aa1860e340a3b7bc7d3fe906a2436bc5f97d7&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""nApQmivAKdgJneJqyerr"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
165,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:165},&quot;memo&quot;:{&quot;id&quot;:&quot;mvLvkMLYpc05ZhwbSPGj&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;9aa17196f9330fa705300314a5210529278537083c118a2577e1ea9821c75ad4&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""mvLvkMLYpc05ZhwbSPGj"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
166,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:166},&quot;memo&quot;:{&quot;id&quot;:&quot;JbTYEsyMYFcWZjRazHM5&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;79dce903c92409cbd92b6720b243e93c459ee82061eb036d25476c01a4bfc74b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""JbTYEsyMYFcWZjRazHM5"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
167,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:167},&quot;memo&quot;:{&quot;id&quot;:&quot;oTR04zNBlwVUcYXa0x3u&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1b33cfbd75347841a311f6ad7d59c3e7e71b8d358f17d7c6ddf4009d00aa3b19&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""oTR04zNBlwVUcYXa0x3u"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
168,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:168},&quot;memo&quot;:{&quot;id&quot;:&quot;OyGWavtJRFF9k6JOywS0&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;6cf4b132d360cf6ee82fe143b38b0c82f3dd45c2a4433ad24d8d97eda223725a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""OyGWavtJRFF9k6JOywS0"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
169,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:169},&quot;memo&quot;:{&quot;id&quot;:&quot;f23qG4UEk9V32MEgYKJU&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;fc6bc626709233ea592807baea97fb10c2b989db547f6728454fd0162902b8ff&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""f23qG4UEk9V32MEgYKJU"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
170,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:170},&quot;memo&quot;:{&quot;id&quot;:&quot;qBY8Af3Te0HXxeH8WHQQ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;bc09f443aea121d67459de0dca09f0d4753d293f472d20cb0aa4c03c2bf058dd&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""qBY8Af3Te0HXxeH8WHQQ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
171,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:171},&quot;memo&quot;:{&quot;id&quot;:&quot;tvgjmHwrJSSVJvvVsWWY&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;62fa805a8898d3288ca5bea12c8b7f740226a6047e20b698c7de456007232525&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""tvgjmHwrJSSVJvvVsWWY"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
172,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:172},&quot;memo&quot;:{&quot;id&quot;:&quot;mfyrq3XuVKtjOijZf1d5&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1bdcf33d5cf308bd989c23ad80039a4d404c025592d9a8988a6734803e676737&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""mfyrq3XuVKtjOijZf1d5"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
173,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:173},&quot;memo&quot;:{&quot;id&quot;:&quot;3FwoVaEm0sYRnbgfN7kY&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;45f4de3855e8cca1a4d87a4d0f1ccb8b53146008b7c0de98457083c114fcb545&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""3FwoVaEm0sYRnbgfN7kY"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
174,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:174},&quot;memo&quot;:{&quot;id&quot;:&quot;B2n5YSR9pxZwPmYBs5If&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b67fd4aa3ff6e9392bf1780e70ea8786de84a36b3241a6fda66955c5ffe85912&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""B2n5YSR9pxZwPmYBs5If"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
175,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:175},&quot;memo&quot;:{&quot;id&quot;:&quot;WWEczF3TXZGmPfDvunag&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a0aca4ee287e6c2bcf4b5cb678bc18890288c56bbbc93b143d5d68565165094f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""WWEczF3TXZGmPfDvunag"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
176,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:176},&quot;memo&quot;:{&quot;id&quot;:&quot;iNFxi6Ufb0Net3MKz6dp&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c4d00bcc733970c9f8710ac74be2e91b1cec96f7601f2a356a91dfdc1356a61f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""iNFxi6Ufb0Net3MKz6dp"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
177,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:177},&quot;memo&quot;:{&quot;id&quot;:&quot;6iA1UaYJdpHVAFABCI3X&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;653a4b03d12bc73a515cccc5578a2bccebbd1fcbca4d1afd874e6d56d2b36fdd&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""6iA1UaYJdpHVAFABCI3X"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
178,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:178},&quot;memo&quot;:{&quot;id&quot;:&quot;VSFxAd5KIazSdAXg4YNm&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;38bcca9ca60361d2aea63cb7ea959a1ca7f5281456fa5ac5479dbf62c54e0d89&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""VSFxAd5KIazSdAXg4YNm"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
179,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:179},&quot;memo&quot;:{&quot;id&quot;:&quot;fKeUrmuF8ukV6xn8vSZG&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;4b92d0e2a172a5afda224896e6b10dbd206bcd04cf49558a08164ab86d4a8545&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""fKeUrmuF8ukV6xn8vSZG"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
180,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:8,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:180},&quot;memo&quot;:{&quot;id&quot;:&quot;q4qpM16gfmgCpsID0uTN&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7ae687176598099e41ef375b42399089b9774e032e3abf0634ebf092074fdc5e&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""q4qpM16gfmgCpsID0uTN"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 8; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
181,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:9,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:181},&quot;memo&quot;:{&quot;id&quot;:&quot;QhAYSMC39EWVrrlr6FVq&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;14e2ef0837c2cec9980deb635fb167412557069d540cc6465ca0d469923bdac6&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""QhAYSMC39EWVrrlr6FVq"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 9; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
182,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:9,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:182},&quot;memo&quot;:{&quot;id&quot;:&quot;sC0vet2KevDjWGp3GSbE&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;9aa3cde98f7d95de92b9b74a87ef599c8ac328894454095e06a328a1998140fc&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""sC0vet2KevDjWGp3GSbE"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 9; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
183,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:183},&quot;memo&quot;:{&quot;id&quot;:&quot;61oOSwweBZbbNaDZyVEh&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;f97208a0b03438f256e652309cc173150dfb48c727c10630599050a5ec77c542&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""61oOSwweBZbbNaDZyVEh"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
184,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:184},&quot;memo&quot;:{&quot;id&quot;:&quot;sn0XFL3YVmOwCIE7YeDx&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;745d5ee03269ae56b1f5128e44aa9f5564ff08c13076d2f66e1ebfdd32ae7165&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""sn0XFL3YVmOwCIE7YeDx"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
185,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:185},&quot;memo&quot;:{&quot;id&quot;:&quot;5bm9xy7FtgFcW5RyCvqy&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;138aa5bf93e2c7bcd974fb4136d63d0a96a350750a76477df68bb8223eafed45&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""5bm9xy7FtgFcW5RyCvqy"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
186,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:186},&quot;memo&quot;:{&quot;id&quot;:&quot;bL49nZ3t7MQ0OeuxmCqf&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a524619c3cd491c19ed38e555b3a72f0029917bdcfc652469616aa174e0b524d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""bL49nZ3t7MQ0OeuxmCqf"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
187,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:187},&quot;memo&quot;:{&quot;id&quot;:&quot;lieIBhjAFKnnvUhcMxer&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;8292e51ae2eaa6273f20bbc40f7f0307336afb594d730eb876bf65ae662da0d2&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""lieIBhjAFKnnvUhcMxer"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
188,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:188},&quot;memo&quot;:{&quot;id&quot;:&quot;XBXIboV6ri01qQOPjSep&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;11ef220fe43058e96263be2446b3e7d1f7d29c079130f544e611e1b9e48772d0&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""XBXIboV6ri01qQOPjSep"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
189,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:2,&quot;max&quot;:2},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:189},&quot;memo&quot;:{&quot;id&quot;:&quot;x9ZmuslCvScDGStbLmWf&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;91ad0dd7c975af44edec01006a2ad2985e9d4a63f1280bf029e2db5ffbc49da1&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""x9ZmuslCvScDGStbLmWf"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 2; x <= 2; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
190,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:2,&quot;max&quot;:2},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:190},&quot;memo&quot;:{&quot;id&quot;:&quot;EulAIMGXIn5QzqY6HxAC&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;66fb53148ec5e0b5ddbaef845e410edb22071b10d30d54aa87bb4306e586550c&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""EulAIMGXIn5QzqY6HxAC"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 2; x <= 2; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
191,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:191},&quot;memo&quot;:{&quot;id&quot;:&quot;cgqojuMb7Y6BtGoDmzeF&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;49a5959316be4be167a1a9200b936a2310c5e2e482ce784344d40ef4c656a305&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""cgqojuMb7Y6BtGoDmzeF"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
192,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:192},&quot;memo&quot;:{&quot;id&quot;:&quot;NvM4x4jS2yc6DuD5MjS2&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;49abf77ab435576e155ff4e0317cefd7774033dd852149f19f4402dacd1871e6&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""NvM4x4jS2yc6DuD5MjS2"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
193,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:193},&quot;memo&quot;:{&quot;id&quot;:&quot;CBhO3K0DAO6wrNGhHGne&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a105c27d0061f952f95f4a27a3055488957792d45dd771dcb619ae6623a06391&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""CBhO3K0DAO6wrNGhHGne"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
194,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:194},&quot;memo&quot;:{&quot;id&quot;:&quot;LGrTPk55EiXkPThhG42Q&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;8aec3138f638b4a124e3d4832660356c20f51c5e40b1c4032efe906578ee20bd&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""LGrTPk55EiXkPThhG42Q"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
195,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:195},&quot;memo&quot;:{&quot;id&quot;:&quot;1VpdNvHRrtWnzghDLnV3&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e68474cd601fac6bafd46d8435972388f20fcffac65b7aa4115c71f8905fb9e5&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""1VpdNvHRrtWnzghDLnV3"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
196,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:196},&quot;memo&quot;:{&quot;id&quot;:&quot;PiDAXq5n1QW2l7TPfqS1&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c551e71263b66e3e33a1dd78d5507b95b5898fd5e183e1af5e0bd5c2ce9dea54&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""PiDAXq5n1QW2l7TPfqS1"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
197,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:197},&quot;memo&quot;:{&quot;id&quot;:&quot;4ZsJL4iNvzNBvxSX8WiQ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;5648294a1c693659be1117ad5c71a40a911fb6626b6bf77c60f2e7bad815056f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""4ZsJL4iNvzNBvxSX8WiQ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
198,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:198},&quot;memo&quot;:{&quot;id&quot;:&quot;Hd1fWdcGyG41wNHlZ4cD&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;54a751b260b5b06e87c678cee42a0b552e0adbf42835c714cdf05154cb2c4b40&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Hd1fWdcGyG41wNHlZ4cD"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
199,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:199},&quot;memo&quot;:{&quot;id&quot;:&quot;UCEG0qSdJlYh7SW2pQ13&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;0f5d37b95acdc4d2f82c19f2f4818a746ca0bb129e2e1166ed84286aafbb2a7d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""UCEG0qSdJlYh7SW2pQ13"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
200,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:200},&quot;memo&quot;:{&quot;id&quot;:&quot;g8iaQmsEpf06S1bKjShV&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;afa1903c68c0b91286e5725eda37d3e3e9a7c7f4478154c1c6479c0628f42dc2&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""g8iaQmsEpf06S1bKjShV"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
201,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:201},&quot;memo&quot;:{&quot;id&quot;:&quot;6pwDPLC9wZ73w3wJvbVt&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;46a8ab47623a7b110794cd43db35462b63b4f6b69203740bc2349436495bd620&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""6pwDPLC9wZ73w3wJvbVt"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
202,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:202},&quot;memo&quot;:{&quot;id&quot;:&quot;buHH71P5ou9tuml4xkb8&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;90475d94b5907118f519c3575dc4e9b7fc0e4da92dc4e3fd3a65d54e0540848c&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""buHH71P5ou9tuml4xkb8"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
203,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:203},&quot;memo&quot;:{&quot;id&quot;:&quot;J2GG5tA3b8SE1GGVcDgP&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;5be5c0d2607daf6d97e01d0ca28c21762bf0da64ccb01447801d2d96defac8a1&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""J2GG5tA3b8SE1GGVcDgP"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
204,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:204},&quot;memo&quot;:{&quot;id&quot;:&quot;4VYo1TpVZsAyEroA6APw&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;9f7f27d5ee354468b1b0b86a3074a22b60de852259057229e3c1780353bbc0f8&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""4VYo1TpVZsAyEroA6APw"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
205,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:205},&quot;memo&quot;:{&quot;id&quot;:&quot;MyDlsuoeaQun83en55xQ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;49efde0184332740124f26cbef4f77c4bcbca25bd9df14bd6e40b06ce2d0d1c8&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""MyDlsuoeaQun83en55xQ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
206,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:206},&quot;memo&quot;:{&quot;id&quot;:&quot;oKzmprASTFqBXMKcz2t4&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ff54ca5e903dc7be83e6738a47211fdc3abd33044f136a1541794f489421805e&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""oKzmprASTFqBXMKcz2t4"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
207,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:207},&quot;memo&quot;:{&quot;id&quot;:&quot;5QHwIvuXe81y6DvN3qIs&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;8c50976e731d86b57656f350e6cefde50001eef92985551b4bac18d1e7669f39&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""5QHwIvuXe81y6DvN3qIs"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
208,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:208},&quot;memo&quot;:{&quot;id&quot;:&quot;dKIxdX56iqyVHqV0GACi&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;edf930d4e8f38552eeda09e5608f6e73e7f0f28db87c8f412b9da2332375d574&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""dKIxdX56iqyVHqV0GACi"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
209,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:209},&quot;memo&quot;:{&quot;id&quot;:&quot;qRyyWvMk2mkOX1HgMlYL&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7048c4291c114d88657fb67a68d2d8c041aaa3e7913c172de478733d674c1a1b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""qRyyWvMk2mkOX1HgMlYL"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
210,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:210},&quot;memo&quot;:{&quot;id&quot;:&quot;vUljndJqm00f8fc7t3R1&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;4238b6f5541f7e72a6939031af063e5de52a74df19b9af2bc97a83cd81a62907&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""vUljndJqm00f8fc7t3R1"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
211,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:211},&quot;memo&quot;:{&quot;id&quot;:&quot;OmNFUi2h3q4q9mRyLktk&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;6a1f05971cc6a90801f3ea007d64f596f63dbdfc0ea057cdc77f466c75b4675d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""OmNFUi2h3q4q9mRyLktk"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
212,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:212},&quot;memo&quot;:{&quot;id&quot;:&quot;vCy0GjEUJCVKINy0pgYn&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e6934a26763e672b4f1463474c6a6dc488543e70cc42987503d50259c988be60&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""vCy0GjEUJCVKINy0pgYn"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
213,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:213},&quot;memo&quot;:{&quot;id&quot;:&quot;3PzKMJIpnfcASPZjunHa&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;709ae1b51bf91456a1c0825d84bbfad1f70a00998cddc9cc7a880dd355174853&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""3PzKMJIpnfcASPZjunHa"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
214,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:214},&quot;memo&quot;:{&quot;id&quot;:&quot;c07tTTRGhUkmzCggfWtp&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;fcac5afcaff4f1640bdfc09cb62ecf8d21677efc0811c537d3df9a7d84dcb768&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""c07tTTRGhUkmzCggfWtp"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
215,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:215},&quot;memo&quot;:{&quot;id&quot;:&quot;BGDXGHVIUChrlIGagUwV&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d48fcdce816422f7b1e4404fe4cc78e30097fbe28175647cdd31e0333cc86008&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""BGDXGHVIUChrlIGagUwV"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
216,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:216},&quot;memo&quot;:{&quot;id&quot;:&quot;352Zgx933aIEvPlBoCKH&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;3f018a3c41c25412cbc3fd44b41ec2f013439d1b90cb882b1c6f4e11b1be1ee3&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""352Zgx933aIEvPlBoCKH"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
217,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:217},&quot;memo&quot;:{&quot;id&quot;:&quot;49mPb2yy6uNGy57KSVSE&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;9c97caa50723fbb8ac20da7bb42638a22ae9f35373527127fc5f85c06c2ba066&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""49mPb2yy6uNGy57KSVSE"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
218,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:218},&quot;memo&quot;:{&quot;id&quot;:&quot;ejbucCB6qLDtripYqA3m&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;caa27bcdd1798e9bdfcd251f507c4d11b7414529794995acb3df91475b950bdf&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ejbucCB6qLDtripYqA3m"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
219,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:219},&quot;memo&quot;:{&quot;id&quot;:&quot;Y8Uto8JIhUIjjKOEO0aN&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1f35ef235438baf87e086dfe116132b9f9cc3f2e1b7505752bc760f6590ce8da&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Y8Uto8JIhUIjjKOEO0aN"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
220,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:220},&quot;memo&quot;:{&quot;id&quot;:&quot;spS8Z3DDg02j5fuizZDw&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;28d407f6f1b5c870c51612d9d11b0b41668788d7a75b269244ef7a2b6bda58c8&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""spS8Z3DDg02j5fuizZDw"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
221,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:221},&quot;memo&quot;:{&quot;id&quot;:&quot;BSX6lv9Ye9rYTOlR5oZ0&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;6af0d2c2660ca38f72f9b13a86a14ff7430a7c98bf32f22a7f8b90ffeeb4c87a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""BSX6lv9Ye9rYTOlR5oZ0"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
222,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:222},&quot;memo&quot;:{&quot;id&quot;:&quot;h7VKUJGvu4O0toopTvFA&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;dea715461d44d6cf7a8302aae0fd4d1fb8d665abf4de516c0eb408c7119b4324&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""h7VKUJGvu4O0toopTvFA"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
223,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:223},&quot;memo&quot;:{&quot;id&quot;:&quot;AvsEvhvSsvCgraoDABqs&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c189c9f5c7cd4280304d6e7bc2d77061f59c9c7fdc1ae31217adbe83b52a7218&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""AvsEvhvSsvCgraoDABqs"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
224,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:224},&quot;memo&quot;:{&quot;id&quot;:&quot;MvPQgrWB6tcVhiv81ZOH&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;f99938eadb1dd796a74f510b3d0511e27c389f966162b3c87fcc58a324c1df72&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""MvPQgrWB6tcVhiv81ZOH"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
225,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:225},&quot;memo&quot;:{&quot;id&quot;:&quot;pfTTPDjdS0btf8W6ketp&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;926f7995239c7d5ece1bda2d6c3aa3a1147f757ac72bb6dd61b0aed12c6d2441&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""pfTTPDjdS0btf8W6ketp"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
226,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:226},&quot;memo&quot;:{&quot;id&quot;:&quot;usmG9Z6o1zFj1uFe1WQq&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;4f55a63b9d37a767dbd3e5be6f2dca1374f8582e512d2502221faeaa2c5ca8cb&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""usmG9Z6o1zFj1uFe1WQq"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
227,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:227},&quot;memo&quot;:{&quot;id&quot;:&quot;EKezhBmVx4NyTmOW4P0c&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;5a0a01257b6cb07a48dab65067085792ead18db8de67d255522dee347e7b14b4&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""EKezhBmVx4NyTmOW4P0c"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
228,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:228},&quot;memo&quot;:{&quot;id&quot;:&quot;GwP7uKAaIMGUGIZoDFR5&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;3b63162e1df1dfe5aa95758767b0cca8dacf4aa5209529d0b24e88e56771559a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""GwP7uKAaIMGUGIZoDFR5"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
229,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:229},&quot;memo&quot;:{&quot;id&quot;:&quot;t8qlzDHafW65SUVQESpb&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;0673d307e654ac12dcdc325f397d204f8e7147bda49dcbee15d09aac4583d6dc&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""t8qlzDHafW65SUVQESpb"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
230,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:230},&quot;memo&quot;:{&quot;id&quot;:&quot;UASsGUbTLMTJQjxM2UPq&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;845f9989cb7dc525771a5e541b79ca81ec2d81e11ba59b12783e8dca5df35724&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""UASsGUbTLMTJQjxM2UPq"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
231,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:231},&quot;memo&quot;:{&quot;id&quot;:&quot;4oPITJEjv7DRViTf2rOK&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;f23fea7681ed056dae369bc3cfa35fd3751845fab281ad531a5e90faaaf3777b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""4oPITJEjv7DRViTf2rOK"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
232,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:232},&quot;memo&quot;:{&quot;id&quot;:&quot;Khir5VX6cZ1479Yd6o5A&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c1722cc929076cf08cfa3a4007522de0a48d7d9c912378945f784cd5701e3b88&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Khir5VX6cZ1479Yd6o5A"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
233,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:233},&quot;memo&quot;:{&quot;id&quot;:&quot;tBSl242PJ9nOkNnoGqK0&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;15946b8000cab566da1bb4630236b5030b673a01d7daca2619d1a3955b4e5629&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""tBSl242PJ9nOkNnoGqK0"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
234,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:234},&quot;memo&quot;:{&quot;id&quot;:&quot;jXKuFwcAVqJyrjZ2ONiX&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ee0ca6910a9cba2213dce0c79fd780b451e8045f952b5c19740ab0820d06560f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""jXKuFwcAVqJyrjZ2ONiX"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
235,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:8,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:235},&quot;memo&quot;:{&quot;id&quot;:&quot;o5OrO8wLOFtl05DDBDxP&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;236ddfdced46b78f81e19aa864668c63199faaeb1f57121a597503052d1cf38f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""o5OrO8wLOFtl05DDBDxP"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 8; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
236,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:236},&quot;memo&quot;:{&quot;id&quot;:&quot;AFwjLz3ZioGlPOXJ9s2J&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;16b13285c2e5e9fd58caebae96dd0e98bbbe2919ad508f3bd82e6fc1f440dec3&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""AFwjLz3ZioGlPOXJ9s2J"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
237,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:237},&quot;memo&quot;:{&quot;id&quot;:&quot;dsLOJdEg2blK1gpHadrF&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;919a161f7199f65a5bc29bf8372d53dd36336927b1d28ef31f90e7b5b9ed3bd5&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""dsLOJdEg2blK1gpHadrF"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
238,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:238},&quot;memo&quot;:{&quot;id&quot;:&quot;5cmjLuyOj1SKVZfRKdgD&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;613e335c32985b36882936921b9b9fc941aef217d5865cdfc67758a815026ebd&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""5cmjLuyOj1SKVZfRKdgD"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
239,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:239},&quot;memo&quot;:{&quot;id&quot;:&quot;5k2BAWPestCM1mUJUhCF&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;35158e6c895a94e6bc69388a0ef724479c97835aae10d6bc81a47f5d08786b9f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""5k2BAWPestCM1mUJUhCF"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
240,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:240},&quot;memo&quot;:{&quot;id&quot;:&quot;RvH43c3ETgPuMkoCKkz7&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;fcfa25a8885450fa04542ac9d216f71ee381c4e12fca2b5ed4fb4bcf989b5647&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""RvH43c3ETgPuMkoCKkz7"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
241,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:241},&quot;memo&quot;:{&quot;id&quot;:&quot;oLEtLXfxO6bXj3fNHtde&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e626ba2aa6e88846870c5e140df6e166b883d5bca8129cdd763437f9cdc60fc8&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""oLEtLXfxO6bXj3fNHtde"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
242,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:242},&quot;memo&quot;:{&quot;id&quot;:&quot;TNwODJNzU88knxUVvcm6&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;fba6296224f67e7f6ba5a577312a959772bc87fcfc35309140dbb1fdbcd2d0c3&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""TNwODJNzU88knxUVvcm6"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
243,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:243},&quot;memo&quot;:{&quot;id&quot;:&quot;kcM3m198F5K3khUVpkn4&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;814796e2635cce05e365d91bb30dc3eee5d1b5531d5f9fddb1c15a1697be69b8&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""kcM3m198F5K3khUVpkn4"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
244,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:244},&quot;memo&quot;:{&quot;id&quot;:&quot;6QwDeVBCCGXGZNmuGhAt&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1cddca2c26548aa3fc4e2db082f6b6f8946f61e4e9fcd7ff1d20afd363f68da2&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""6QwDeVBCCGXGZNmuGhAt"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
245,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:245},&quot;memo&quot;:{&quot;id&quot;:&quot;NrOMb86rOsJwONc9iDYv&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ecf1f83be33b7647703a8c07e49ffee819ee25eee381ee8707de0fc2114aeb13&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""NrOMb86rOsJwONc9iDYv"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
246,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:246},&quot;memo&quot;:{&quot;id&quot;:&quot;eNay5bO4RBpfMwZ7DrGL&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;28aa160e1f00eb5bf8bbffa5970427557d69b1410c2428869d0aeee5ae44e099&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""eNay5bO4RBpfMwZ7DrGL"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
247,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:247},&quot;memo&quot;:{&quot;id&quot;:&quot;8MMqR65FKYd2yEevenfY&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1a01f576cb9781c983a5f33c896d66e07787e55b4f6e3573f41cbdaf7771833f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""8MMqR65FKYd2yEevenfY"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
248,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:248},&quot;memo&quot;:{&quot;id&quot;:&quot;LbTuvDOxLnBz2m1voH8W&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7802f9f9b54cc167666237d4ae8f7a8477ecbf57fdf367581d0a04fdc5ed7352&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""LbTuvDOxLnBz2m1voH8W"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
249,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:249},&quot;memo&quot;:{&quot;id&quot;:&quot;4k6HnsprAWIEXzsTK1mm&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7a5a3f59b01ed50aa3cd2802e11b7f271fb8753f6b495feb18b7e6d7a5a77442&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""4k6HnsprAWIEXzsTK1mm"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
250,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:250},&quot;memo&quot;:{&quot;id&quot;:&quot;kRK2CzceW9mnBfkibwKK&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;3ad025ba573c016171c2698866982a76f7606f9147543461d5896039860f14bf&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""kRK2CzceW9mnBfkibwKK"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
251,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:251},&quot;memo&quot;:{&quot;id&quot;:&quot;Lcf2NejmnxF9PwkXaaXP&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;844224ffc3607599170ae71842bd0eebdbb714a1a2c96074a55dfce02773c14d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Lcf2NejmnxF9PwkXaaXP"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
252,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:252},&quot;memo&quot;:{&quot;id&quot;:&quot;CUncnetB3wEjQjmAIBTK&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;89fcbbd3cdcc1dbe02098576126dfc31a5cf16a265a003489dd4c117747c8598&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""CUncnetB3wEjQjmAIBTK"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
253,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:253},&quot;memo&quot;:{&quot;id&quot;:&quot;7We6QOsOcFXEVAkX9w5d&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e03c4b17207ac36abd9d9192e8db55fc177e0dca081704418498be980abb387a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""7We6QOsOcFXEVAkX9w5d"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
254,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:254},&quot;memo&quot;:{&quot;id&quot;:&quot;42xoPPBFB2SYRGwGcdWr&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;152a1d690d0cc151ba27f17b07a5d097d58ce90594f66282933db7a709f419ac&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""42xoPPBFB2SYRGwGcdWr"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
255,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:255},&quot;memo&quot;:{&quot;id&quot;:&quot;svz0pLGqIzoxZOZHC3Dt&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a6f2c8212e7de519f2b11ef33a845eeb3bd91a62385e1b049abd8ae4444b48b1&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""svz0pLGqIzoxZOZHC3Dt"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
256,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:256},&quot;memo&quot;:{&quot;id&quot;:&quot;RKENO2oh77suGWGwZaeU&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;bf43a65afd4f59a81557b14214ec3014d140691dbbc2fb06b8c3b61863c1e62a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""RKENO2oh77suGWGwZaeU"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
257,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:257},&quot;memo&quot;:{&quot;id&quot;:&quot;X7TscmlFJuuvI0jgvhd2&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;6c6cba82c0f2fdeb5aca0e85bcab1bffb1db1c3021cfd005e2bb1bacbfced04d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""X7TscmlFJuuvI0jgvhd2"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
258,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:258},&quot;memo&quot;:{&quot;id&quot;:&quot;CutNYGrVIF8om3brGgWk&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;0e8f62756a15393ffde126403d6c8af5b8f2dc6343929378ab4a5dd98ef57705&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""CutNYGrVIF8om3brGgWk"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
259,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:259},&quot;memo&quot;:{&quot;id&quot;:&quot;fTGikf58NmtOMCt08XIX&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d63b13cc487941ca89b0067b09a96cc844644f264ae0701255ada158cbae8520&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""fTGikf58NmtOMCt08XIX"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
260,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:260},&quot;memo&quot;:{&quot;id&quot;:&quot;YWd8NVj26Kd4m1r1RvxM&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ee6b8e3d7704895b800ac7aed2a53a411193fca48465bd1ecce77456485ccfe5&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""YWd8NVj26Kd4m1r1RvxM"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
261,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:261},&quot;memo&quot;:{&quot;id&quot;:&quot;xlcbfc8eJKOtRhFV5Tgx&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ffbc1d962080d6a4d9686b6272f7d6b262cca7a03f8d75965412bfba4d6f5be7&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""xlcbfc8eJKOtRhFV5Tgx"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
262,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:262},&quot;memo&quot;:{&quot;id&quot;:&quot;djIzK08YokOHvGJbkLoo&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;6776ae8314241fa44c4bab05e1395bd10640a7e33741b2c25cbf229734c7d875&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""djIzK08YokOHvGJbkLoo"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
263,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:263},&quot;memo&quot;:{&quot;id&quot;:&quot;hnsvS0eNNJPLya7Lt7Fg&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;976f86150f442a82833480ee9454443fe30ebf186791dda2a57e9c89ee30dd08&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""hnsvS0eNNJPLya7Lt7Fg"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
264,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:264},&quot;memo&quot;:{&quot;id&quot;:&quot;elyQdDuoRxofaOtT3dKE&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7f2f000f2d0a333459fc05a6609323a097f8e0e66a3c20020d1d8db5bd198838&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""elyQdDuoRxofaOtT3dKE"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
265,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:265},&quot;memo&quot;:{&quot;id&quot;:&quot;WpcVY9gtk8UC2eb0JXKN&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;de42530fce4020e17c7737d70e78bdf5d1ffe5a7dfdbddf96ad95fdb05746bdd&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""WpcVY9gtk8UC2eb0JXKN"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
266,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:266},&quot;memo&quot;:{&quot;id&quot;:&quot;Bn5giIHbir8Lr1aPmKK0&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;dde795f67cc5db83e5b6feee560a429f36e20ffc321f94ff9c8a8301ba81649a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Bn5giIHbir8Lr1aPmKK0"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
267,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:267},&quot;memo&quot;:{&quot;id&quot;:&quot;9OqSQWrsSTVp1fkUHj4V&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;3734e9607a13cb61ba4e14dd085a0a9763978fd68fde380df7509a36b0d20426&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""9OqSQWrsSTVp1fkUHj4V"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
268,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:268},&quot;memo&quot;:{&quot;id&quot;:&quot;fZfy1zEf5BckXSpCUwRm&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;91b72b3ea1f15ce9de6b6fb9557e5b7c5f34db0ff8612653236707996f8c65c9&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""fZfy1zEf5BckXSpCUwRm"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
269,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:269},&quot;memo&quot;:{&quot;id&quot;:&quot;sadTQMhkAGyeMvvJcAoq&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;51f2df68c955d7efe887626b2397b28863d29ddf48b88db3ac68c18a7cd5e77d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""sadTQMhkAGyeMvvJcAoq"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
270,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:270},&quot;memo&quot;:{&quot;id&quot;:&quot;srSPcQWNuJd4NrYNSVVE&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;f3c68160c9619626f91b06bc211e2e7cb874667dcf6f6f2a3532519c769aa599&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""srSPcQWNuJd4NrYNSVVE"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
271,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:271},&quot;memo&quot;:{&quot;id&quot;:&quot;UB0IkLKSYY5EkWWu8wP5&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;0c7a9a54bb76e24560699bbf9ac275a848af5842f148cb789586e6c82b6c048c&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""UB0IkLKSYY5EkWWu8wP5"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
272,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:272},&quot;memo&quot;:{&quot;id&quot;:&quot;Kgjtw7t2EzfUE3yNPe91&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1bf75afaec4c24574d9ac058d748a05341302a4dbd8f928e2cf0028aee93bf94&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Kgjtw7t2EzfUE3yNPe91"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
273,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:8,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:273},&quot;memo&quot;:{&quot;id&quot;:&quot;eOm6X1tbbejG5vfFXXq0&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;8f5ade48ff8cd2e4ee864a34a609d8e0776c0efb36cccdf222132dfeae678e60&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""eOm6X1tbbejG5vfFXXq0"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 8; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
274,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:274},&quot;memo&quot;:{&quot;id&quot;:&quot;KYgq1KsrRSkm7hGEz6oj&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;52602e59a3dfb39dfdabe33c639947899b4854f4b724bcffec33702b38804a9f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""KYgq1KsrRSkm7hGEz6oj"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
275,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:8,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:275},&quot;memo&quot;:{&quot;id&quot;:&quot;neJt6gdBF0ReuFeAXfpI&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;70235d0b8e09b50e60b30a91aeb30b3e039b3d2bcf59f9da8530b7554033be8b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""neJt6gdBF0ReuFeAXfpI"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 8; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
276,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:276},&quot;memo&quot;:{&quot;id&quot;:&quot;740K9mqGFg1G22TqGyzz&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;648fd4414b1b9103ed9b9e0c5c235d212487148f027fbf3bfc98b64cd05c869f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""740K9mqGFg1G22TqGyzz"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
277,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:8,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:277},&quot;memo&quot;:{&quot;id&quot;:&quot;W8jz3r9mpigyOMNDgmq4&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;13aa8cef7c7ddec1f4b85034d845dda78bf9c306ac98b6761bf70c6c78a50532&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""W8jz3r9mpigyOMNDgmq4"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 8; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
278,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:278},&quot;memo&quot;:{&quot;id&quot;:&quot;adRG4vLhL1afcuvQJl37&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e7f958ac56d564e35188d9ebc2ccc002d436fa870de90933a252db510352eef2&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""adRG4vLhL1afcuvQJl37"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
279,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:279},&quot;memo&quot;:{&quot;id&quot;:&quot;pUaNwgJTpNKNcOtrpNAi&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;cbc30230a712eaeff312cf6a815f96b8ba1de69c9c13b6dc78b47684ac290e4e&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""pUaNwgJTpNKNcOtrpNAi"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
280,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:280},&quot;memo&quot;:{&quot;id&quot;:&quot;reazJ9XFFgglLrsljhQq&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;24e55360c5240011106c72d1f15affc8f91215ba9c337fe192ab022bd75e154e&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""reazJ9XFFgglLrsljhQq"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
281,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:281},&quot;memo&quot;:{&quot;id&quot;:&quot;AYG3jnCg9VQLeqHSOYvT&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;3c29ee9c8dcfcc8dedc1d9659603d88ad22603a8c920566a3b06929c241d6c38&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""AYG3jnCg9VQLeqHSOYvT"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
282,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:282},&quot;memo&quot;:{&quot;id&quot;:&quot;oiwlmv3KyWofUXDOOFLU&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;4133ff747393bb420a7df548ce33aa979b3cca11ad2a0c86f20f8819356842df&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""oiwlmv3KyWofUXDOOFLU"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
283,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:283},&quot;memo&quot;:{&quot;id&quot;:&quot;WYmFTyzxrrtPNJdZTTyj&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d32791c0f05c1ab69ec5c39da1457d2043ffcdc5dd4e42140c1aba31eb8fe4f1&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""WYmFTyzxrrtPNJdZTTyj"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
284,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:284},&quot;memo&quot;:{&quot;id&quot;:&quot;S7gMC3Zeyn8GPyOXWMux&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;3fd7191b93b5dc87595fff78c277bff3c03f7a14ce98a3f93f7c36267e1a4267&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""S7gMC3Zeyn8GPyOXWMux"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
285,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:285},&quot;memo&quot;:{&quot;id&quot;:&quot;rHGXB0UeyBOClkGqJTYW&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7513c1b8b90a9c80f6f75edc86f3a4044b205988cd655533b086cc4ef5ca94c7&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""rHGXB0UeyBOClkGqJTYW"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
286,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:286},&quot;memo&quot;:{&quot;id&quot;:&quot;Ta7W84AzDR1n07RhhCZ6&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;653a107a156d5c012f62ae18356bc879abfbb108e3442724d4eaf91b16778ee7&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Ta7W84AzDR1n07RhhCZ6"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
287,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:287},&quot;memo&quot;:{&quot;id&quot;:&quot;5ho2IRo6VyJV6bzvdkGB&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;f9a9b6121ff74834939670c4f8512e94a9a76a9df8da5046f728b7dbfdcf0c1f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""5ho2IRo6VyJV6bzvdkGB"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
288,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:288},&quot;memo&quot;:{&quot;id&quot;:&quot;TCK2mU68Ge0Q1fLDKIm6&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;f60d5887de80e8a713e7f8984e645bb7820c73b033b8217de9dc11d0dec6dfc0&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""TCK2mU68Ge0Q1fLDKIm6"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
289,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:289},&quot;memo&quot;:{&quot;id&quot;:&quot;2Huv53b8gc8MY9opz0T7&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;65d2435de8f145c75c9d4d9d2fa56ee53c7002d3a1e6d865171c9fa572e39a44&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""2Huv53b8gc8MY9opz0T7"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
290,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:290},&quot;memo&quot;:{&quot;id&quot;:&quot;bvBpMNEX3OAMMQDoeaNw&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;33102b6cdcfcee5c0370111e43d1c8ab1b770623821c33537827625dfa460b87&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""bvBpMNEX3OAMMQDoeaNw"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
291,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:291},&quot;memo&quot;:{&quot;id&quot;:&quot;GwUHokIw61NKYAwRA1D0&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;106ea2d5832b44e37592e0745f6785ccb505b2372aa93b0f15d665522744b22b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""GwUHokIw61NKYAwRA1D0"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
292,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:292},&quot;memo&quot;:{&quot;id&quot;:&quot;1amXk6pHHfrlgAKYuprE&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;9f77c8dea3d7761bce3e2775ba0735824b1dfc12847315cfcb1bce1ca751f87a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""1amXk6pHHfrlgAKYuprE"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
293,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:2,&quot;max&quot;:2},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:293},&quot;memo&quot;:{&quot;id&quot;:&quot;GzlvBQmiZ4oz0EdBwsrX&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;97e2c30c1dcff779ae97d74722223f51c7dcab877c7848b5ae8413c8cac894c7&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""GzlvBQmiZ4oz0EdBwsrX"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 2; x <= 2; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
294,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:294},&quot;memo&quot;:{&quot;id&quot;:&quot;KsSUj0vMWbvyxu8erTQ6&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;0d2567a68416f233196b2f8139a31e255d94b7b9ee676d6b4fb1995759ca8ec3&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""KsSUj0vMWbvyxu8erTQ6"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
295,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:295},&quot;memo&quot;:{&quot;id&quot;:&quot;7ZfbDi7n8ywL8XxnZf2Y&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;996b285c91cedcb2b9c81f2f4be6c6969a8c698318f9672ee1c5d072b2af339e&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""7ZfbDi7n8ywL8XxnZf2Y"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
296,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:296},&quot;memo&quot;:{&quot;id&quot;:&quot;9qmSyqiIcdr3UeREPTev&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;074055f2ad8389ee91a9f9d107886f8cd64361b6a652060c912f4c929d3c446f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""9qmSyqiIcdr3UeREPTev"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
297,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:297},&quot;memo&quot;:{&quot;id&quot;:&quot;A9SEtUvmswu3piRGAAWv&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;92cdaf0d004eb34ddded316868675c5d72a5ee816abc0ac1fa0e2ead7580672d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""A9SEtUvmswu3piRGAAWv"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
298,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:298},&quot;memo&quot;:{&quot;id&quot;:&quot;BgF93UB6l6UhqXKPvGsB&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c949cd3c91b8b700bc6107012f273364f5494df79aaf989ad69f6733a48d8426&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""BgF93UB6l6UhqXKPvGsB"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
299,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:299},&quot;memo&quot;:{&quot;id&quot;:&quot;cqIYuTWWurLQGr07sL9j&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1d473adfdedc935b0be2daeb142f68df4c50d166d1b11ee89a28387f22dac7c5&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""cqIYuTWWurLQGr07sL9j"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
300,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:300},&quot;memo&quot;:{&quot;id&quot;:&quot;P06NNC5IJ1i9N9hk0KeW&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7b4e962a69ee3e07484b52d670c1e61b705a9e1de06a064594fa237bca6f9bed&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""P06NNC5IJ1i9N9hk0KeW"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
301,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:301},&quot;memo&quot;:{&quot;id&quot;:&quot;2eOwLnSjZUJ5MZvRVOYO&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c75e388bc7ab0b6f31177932bce81bc77f600f8ac33c8d29fee8f67f6f89a99b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""2eOwLnSjZUJ5MZvRVOYO"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
302,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:302},&quot;memo&quot;:{&quot;id&quot;:&quot;6jJcwNyh6wqpdGmdmfY0&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;00e9822b1c8a1c07b578d48caad5c880913d7edfc1b212d7043dd5452c220bff&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""6jJcwNyh6wqpdGmdmfY0"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
303,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:303},&quot;memo&quot;:{&quot;id&quot;:&quot;ZH6wpo4HD3qKfkQvEz78&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;6227894d83ae9b2cafa6964a59d7a0081d9b18ecb3e04212127895f9118af58b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ZH6wpo4HD3qKfkQvEz78"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
304,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:304},&quot;memo&quot;:{&quot;id&quot;:&quot;NTE3w0TwFEsjUepTWj7I&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e67970faeb482a6fe7f1f1354ed8fa7943b1725b95a8830d6a17215b83389bb7&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""NTE3w0TwFEsjUepTWj7I"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
305,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:305},&quot;memo&quot;:{&quot;id&quot;:&quot;MmmkfegVKBnwC67CmKHh&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d9a7e7166e9b27dd65cf345689e59a67f10b8fd91e957db2aca5f207247a174d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""MmmkfegVKBnwC67CmKHh"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
306,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:306},&quot;memo&quot;:{&quot;id&quot;:&quot;uKoYLI0WgwFK88LcUzd5&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ed98920a949c1306f675ab259934b8841b821fdb3d5460d07da417fc6b1abaa6&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""uKoYLI0WgwFK88LcUzd5"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
307,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:307},&quot;memo&quot;:{&quot;id&quot;:&quot;hNxpJt7rV23pxmMQraSk&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;6997005cd31d5ab7ae889b63ffe1455b74970256bb40a7352cbd305dcc8c71a0&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""hNxpJt7rV23pxmMQraSk"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
308,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:2,&quot;max&quot;:2},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:308},&quot;memo&quot;:{&quot;id&quot;:&quot;aiI7i9PqtjsBu5ERdNG0&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;5b73724578ec9c51cd2d734c1447be19775723742e05c534e6299d7b28bf4153&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""aiI7i9PqtjsBu5ERdNG0"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 2; x <= 2; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
309,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:309},&quot;memo&quot;:{&quot;id&quot;:&quot;DFGJqKZK6hXxeGVW8O7n&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;0c5e9eba94530960bd10dcaaad6a5a04ff7e666046e4278b2420971cb92d7f60&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""DFGJqKZK6hXxeGVW8O7n"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
310,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:310},&quot;memo&quot;:{&quot;id&quot;:&quot;CCetnWcNcJApr8lXAleX&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;f3686027bdbb2b65829df4fd24011686708eab70fe2ad633f85fc381335cf889&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""CCetnWcNcJApr8lXAleX"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
311,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:311},&quot;memo&quot;:{&quot;id&quot;:&quot;kgRgA479b1ZJ7E89bYRo&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;8fd5953e1fde9981dbb494162d4767ee6d2b0f6beee0bddca6a106fdc08e5e81&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""kgRgA479b1ZJ7E89bYRo"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
312,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:312},&quot;memo&quot;:{&quot;id&quot;:&quot;1hA3qhDUtFYxMSRlOD9t&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;44926b6c93f2ba612c6d46661e6ee5de81a17ed59f05c5e83757d68f7a057f41&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""1hA3qhDUtFYxMSRlOD9t"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
313,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:313},&quot;memo&quot;:{&quot;id&quot;:&quot;y6HDAUuPV8bHoiJk00Hh&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d3e4f0b449e237b8c4d353c8007a54709f2bf63944b68aeb9b9846414487f1f1&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""y6HDAUuPV8bHoiJk00Hh"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
314,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:314},&quot;memo&quot;:{&quot;id&quot;:&quot;PYnvE4m3gTuyFcSH2Van&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;0118190328ae06766cea7b5f4bf33bf1a15f2a0713a8d2ec6f9ffbd0ead5e000&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""PYnvE4m3gTuyFcSH2Van"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
315,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:315},&quot;memo&quot;:{&quot;id&quot;:&quot;jehQzGmku2rtK5mHdqVw&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;8e4e356aaf55765ae13c08c71da0fd165efea36acc9b8d9dea92fcfcc70babad&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""jehQzGmku2rtK5mHdqVw"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
316,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:316},&quot;memo&quot;:{&quot;id&quot;:&quot;Gozl9ehP21yBllO8Ptzc&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c0460668d0b775b8a842ed0811f548a5f353fedf22779cbcd69bff5671c27478&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Gozl9ehP21yBllO8Ptzc"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
317,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:317},&quot;memo&quot;:{&quot;id&quot;:&quot;bB6EpnVFB6gPXwRbOWKT&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;721bebf7287ad014fbdbe284c6cd7bb49c1b20f7d6cdd68bb91cf8d0c682923f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""bB6EpnVFB6gPXwRbOWKT"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
318,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:8,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:318},&quot;memo&quot;:{&quot;id&quot;:&quot;WpAflYaCaozaT3HbaHvc&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;20616e6de3988766e976b45fad83be77be19ed5c7e5a939223e14214c32979c9&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""WpAflYaCaozaT3HbaHvc"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 8; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
319,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:319},&quot;memo&quot;:{&quot;id&quot;:&quot;LV9Qw0iB3YeToeMkc2un&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;aa51cb3f81e674d173ce3667a184c1a7d09307430831714c6120026653d9d19c&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""LV9Qw0iB3YeToeMkc2un"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
320,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:320},&quot;memo&quot;:{&quot;id&quot;:&quot;bmisBik9SdcvE8hLKnDM&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;4c87ad789f50f6a76b32eaf3e113870ac7ab962483ff252f8ba99542fd5857df&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""bmisBik9SdcvE8hLKnDM"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
321,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:321},&quot;memo&quot;:{&quot;id&quot;:&quot;xyg9ETZPXdQZoDKxEwiU&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;42e39f3c50aa86a4a3f9f68fe7da03363614c3217e7b00e56b6f65f6bee478c4&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""xyg9ETZPXdQZoDKxEwiU"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
322,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:322},&quot;memo&quot;:{&quot;id&quot;:&quot;WkMIouYCOO293k9htfQ6&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;77e913cfa353709c732417738b516ca4bc79e0aa4c68aa2051c5977e88b9b3b3&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""WkMIouYCOO293k9htfQ6"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
323,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:323},&quot;memo&quot;:{&quot;id&quot;:&quot;8YE0NsbRZSWj3d22Ynyr&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;70dabd5921479be981c836cb8e28ce97580e83ebfac7ae33bd1fbc3d7870f9a4&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""8YE0NsbRZSWj3d22Ynyr"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
324,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:324},&quot;memo&quot;:{&quot;id&quot;:&quot;W5TySg7Uqnrog6oF3awI&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;0fbc9abe6c43a9ca5cdc4b91596d50ec3661f501d04b1d9df2b4570f48e811ea&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""W5TySg7Uqnrog6oF3awI"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
325,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:325},&quot;memo&quot;:{&quot;id&quot;:&quot;zDx9nqYU2aHwcgxtoZnG&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;f59238c36e2e4c4ce7ccd7c289ce6fc707ce64865de64093f5ad69b8a437413f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""zDx9nqYU2aHwcgxtoZnG"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
326,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:326},&quot;memo&quot;:{&quot;id&quot;:&quot;JytOjdFy6rmpxeeopT9m&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7d281323564a53d4819ed4ae3f497183a4241336c41569da541923738c57df78&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""JytOjdFy6rmpxeeopT9m"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
327,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:327},&quot;memo&quot;:{&quot;id&quot;:&quot;rWJu6vGK6JywJ8sUtANH&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;3b40c476bc943feb0bdcda88335dc42a1fa8f9e1d171cb937496341b8a56de58&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""rWJu6vGK6JywJ8sUtANH"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
328,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:328},&quot;memo&quot;:{&quot;id&quot;:&quot;QKAEgpiKwgRpzBKUdFIg&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d08beebf3dcb696ecda2613ce6f5ab68b76e30d0f0b7b63996144479bf3636d9&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""QKAEgpiKwgRpzBKUdFIg"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
329,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:329},&quot;memo&quot;:{&quot;id&quot;:&quot;JlZmEMKf1R9bxWvPDEhM&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;76e04270e074cabee18900f313e71e3a4ab79f5a4986b6f4c86cb03b4c48a3ba&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""JlZmEMKf1R9bxWvPDEhM"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
330,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:330},&quot;memo&quot;:{&quot;id&quot;:&quot;kjSIsTNQ6YqRfGuWxKXO&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c08ad5237e9eb57b994c4ae1e1f5ae5ec7db1e0b15b982dc8878611d9b15d042&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""kjSIsTNQ6YqRfGuWxKXO"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
331,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:331},&quot;memo&quot;:{&quot;id&quot;:&quot;sqdxNUkxVZPhw2DzgidX&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;078da84cd0e464cfa82393e51a27e241f4be74f8f2f2b35eb5b4f5f2156395f4&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""sqdxNUkxVZPhw2DzgidX"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
332,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:332},&quot;memo&quot;:{&quot;id&quot;:&quot;EBYXoP3VINvWB9PUKUf3&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;fa7e652fa9cea0290279d34c4feb4f23797719d097eb8ba2c01f46cef63765ee&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""EBYXoP3VINvWB9PUKUf3"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
333,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:333},&quot;memo&quot;:{&quot;id&quot;:&quot;pghIGIjjFDnfM0C4CMT6&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;64722a40eb2ac7e70b7d161cd56a60a11276d1fd2feb0a6dec1d8ac3caabd82c&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""pghIGIjjFDnfM0C4CMT6"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
334,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:334},&quot;memo&quot;:{&quot;id&quot;:&quot;vrbv6z0O6RxkhFS0SIT8&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b70cf19f2dbce7cdc0559584fa4bee0e39be16cef3d9c91b02a3c8616fccfd4d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""vrbv6z0O6RxkhFS0SIT8"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
335,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:335},&quot;memo&quot;:{&quot;id&quot;:&quot;EKOYBSFCnD87bH5Fg1ab&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7ff76ff1c17af5f4c24e8db439b30702a4f81c8becf44ee8f19710a39bd572d0&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""EKOYBSFCnD87bH5Fg1ab"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
336,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:336},&quot;memo&quot;:{&quot;id&quot;:&quot;jMuRmxqNnVeGzok4Lp7A&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;14800e79eca8ea19fbde04db4013373d61d77786027a7d8639c4d1b601c79cff&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""jMuRmxqNnVeGzok4Lp7A"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
337,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:337},&quot;memo&quot;:{&quot;id&quot;:&quot;olJPglOec8M7ZB28lSkd&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;897ae2ea2b95ad97cb06225eb5895a51d78de831ff1159ba8488d7f8fe6f79ae&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""olJPglOec8M7ZB28lSkd"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
338,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:338},&quot;memo&quot;:{&quot;id&quot;:&quot;3mBK5M4HPUfNQXjSfQSb&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;0e1e73c786ef8e87a504f32d2e67b63366cb8ac268505ddeb8bd86faf3b1f90e&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""3mBK5M4HPUfNQXjSfQSb"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
339,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:339},&quot;memo&quot;:{&quot;id&quot;:&quot;dSMuCrqifKV9UzlOqUhc&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1fc7569e728229dce2fde321b220cca7ba5d50a82adae7da76de38a53872e463&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""dSMuCrqifKV9UzlOqUhc"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
340,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:340},&quot;memo&quot;:{&quot;id&quot;:&quot;TEJVLPFnVIOItJL6AFTh&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;45340b1a767f81a8a885ab7ae91f0e79ba298c0d851b772508f7d55906f48ebe&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""TEJVLPFnVIOItJL6AFTh"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
341,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:341},&quot;memo&quot;:{&quot;id&quot;:&quot;wuuL9OeRebk40PCB3OW5&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1981efa00bbbd52572b05b5d2abffb07260867f8c5c7761b692bacd739e02a20&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""wuuL9OeRebk40PCB3OW5"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
342,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:342},&quot;memo&quot;:{&quot;id&quot;:&quot;Jxx5A0HuMMNNVIhZQcbi&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;43b9f85579c37b629395c183f720eee93fd27ee37a3552c209ca753906a2a2e3&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Jxx5A0HuMMNNVIhZQcbi"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
343,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:343},&quot;memo&quot;:{&quot;id&quot;:&quot;dx4CcdOq1RXsczihcM96&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;91c49371f4b59e3b3caf067e8ae69c92640f2e3f450980b0dbc21f5be17e64ab&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""dx4CcdOq1RXsczihcM96"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
344,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:344},&quot;memo&quot;:{&quot;id&quot;:&quot;XxyAx5Q77b1XwcgKtMZa&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;8428a05bc6f322bbf267e8b867535f06a23fbdd4f257e02f5b85b8c0f4cdadc5&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""XxyAx5Q77b1XwcgKtMZa"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
345,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:345},&quot;memo&quot;:{&quot;id&quot;:&quot;stHuCNRzoo0lFK8WcsIx&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;cfd9c2533fd0472301f7130188a2730b469ec33a4f170ccc0c658027d0c815a9&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""stHuCNRzoo0lFK8WcsIx"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
346,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:346},&quot;memo&quot;:{&quot;id&quot;:&quot;HxnByts64JHEUbLMatwk&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a324bd8e386a8f8674bd89880d22b3e0961cd8ae42eb35445b985fd4af39a4a9&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""HxnByts64JHEUbLMatwk"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
347,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:347},&quot;memo&quot;:{&quot;id&quot;:&quot;HMH1MK7KL5cwOhydJpMU&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;464c9e92e29dc8a00e6005b687477040c89343ceaadc0aac55639a28665b54b6&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""HMH1MK7KL5cwOhydJpMU"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
348,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:348},&quot;memo&quot;:{&quot;id&quot;:&quot;iqP1B9fVDTgggYQBKo4a&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1c29ec26080713036c10c98658d1bc25ec43feff292fe4a60a0ebfd19160c255&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""iqP1B9fVDTgggYQBKo4a"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
349,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:349},&quot;memo&quot;:{&quot;id&quot;:&quot;1nQtnS2svbUgGYOWnf4G&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b6fa464972e8aba6475880dc4364a504151dae75e74448363ffeb344be206659&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""1nQtnS2svbUgGYOWnf4G"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
350,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:350},&quot;memo&quot;:{&quot;id&quot;:&quot;pZCwldqY37DOCOQQ3kTq&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;310cd72f5287e69e23429bbf4191a727bd7cb4437b0b6049d53b49735bbc1f32&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""pZCwldqY37DOCOQQ3kTq"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
351,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:351},&quot;memo&quot;:{&quot;id&quot;:&quot;srvRMUWi89TOi3XWUsc1&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;86664680493732e751ad03fe96e7a2e45e3593b4363efa753d6ce56adefbdbf5&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""srvRMUWi89TOi3XWUsc1"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
352,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:352},&quot;memo&quot;:{&quot;id&quot;:&quot;sVEQq1H7MkvWp5FCuwIQ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;0ea46dee99167779108c98f5f60b429a845ea52ebcb909df355599070b56a73a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""sVEQq1H7MkvWp5FCuwIQ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
353,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:353},&quot;memo&quot;:{&quot;id&quot;:&quot;saOlvYKZ3f9DoSO2PLkQ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;820040595d3bf2209a631c4d573449fb6922075029910e966228572fbd777ec5&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""saOlvYKZ3f9DoSO2PLkQ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
354,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:354},&quot;memo&quot;:{&quot;id&quot;:&quot;B7L90MchK4Sqd57yYSy1&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;3d266b8e44df16bb73533fe6526ecad75d7145d39e99b443539b2df602547354&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""B7L90MchK4Sqd57yYSy1"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
355,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:355},&quot;memo&quot;:{&quot;id&quot;:&quot;uLEZnPyUVSOaJEeMSJDG&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;81f05428604bb9ad1cfb62a344d41e620e3bc309dd86cfd5ced0fb6b6b71df82&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""uLEZnPyUVSOaJEeMSJDG"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
356,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:356},&quot;memo&quot;:{&quot;id&quot;:&quot;ZkKOoZphLsgyWtdUQi7x&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;edac5cc443a46be3b882cbe8e5d5bf29ab427b1e14351a6c82beb05cb3d96141&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ZkKOoZphLsgyWtdUQi7x"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
357,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:357},&quot;memo&quot;:{&quot;id&quot;:&quot;74YymoZaxWQUmo1xMvUr&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;742eff84c4719e9c8eafbd02fdc9dc4cc6ea5fbbe309a7897473c02c7a3f8c35&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""74YymoZaxWQUmo1xMvUr"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
358,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:358},&quot;memo&quot;:{&quot;id&quot;:&quot;O3TD6WxnehhnnrJwhav5&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;91b3e82ddce4621c78bafe89cbf5dd9c4102ef204091374bae3dd2880d27e506&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""O3TD6WxnehhnnrJwhav5"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
359,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:2,&quot;max&quot;:2},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:359},&quot;memo&quot;:{&quot;id&quot;:&quot;x1piz1vxJ0jPm9l4EDi6&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7f4de7dd7a2145c7690620c398a38f1f54e6ac5595b2e511a124160330c2a6df&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""x1piz1vxJ0jPm9l4EDi6"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 2; x <= 2; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
360,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:360},&quot;memo&quot;:{&quot;id&quot;:&quot;voMnhl0dxUxYYXE65c1o&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e3ae865341adefc6154b02074df8d09ededa51385d66c3023c39d5cbd92f1a45&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""voMnhl0dxUxYYXE65c1o"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
361,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:361},&quot;memo&quot;:{&quot;id&quot;:&quot;fEenkCBLkL4cSp5vFDUH&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;274b90a1bb49e00b786ccf2befb147c2f68cfaa7044099d07cbcd56ef31cbabb&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""fEenkCBLkL4cSp5vFDUH"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
362,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:362},&quot;memo&quot;:{&quot;id&quot;:&quot;do7gl4moQRQabK8ZmCVw&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;be1a941564d594a64e9c3b9f67d43d3a36ba236fd29dffa11e5b6816456c9fc4&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""do7gl4moQRQabK8ZmCVw"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
363,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:363},&quot;memo&quot;:{&quot;id&quot;:&quot;BVsWiwPtFwZbpElh4upu&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1866bb85f26701cc203d8e9ec328e3f6186a0fb6579f9601fffca9d93c1145ad&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""BVsWiwPtFwZbpElh4upu"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
364,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:364},&quot;memo&quot;:{&quot;id&quot;:&quot;yYFUlfLM12H6N0LeDvaC&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;66448613bbcd2dc963b562c69ebe67d4064851c23a25c78eac5f9e94517135e4&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""yYFUlfLM12H6N0LeDvaC"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
365,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:365},&quot;memo&quot;:{&quot;id&quot;:&quot;tAmNGC8TkiAYu51iZmmb&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d3b792aea3247d3a0170a3e7a52a62f5e3556dc90488e8588ee8f43740d89714&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""tAmNGC8TkiAYu51iZmmb"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
366,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:366},&quot;memo&quot;:{&quot;id&quot;:&quot;1k59FIX2mud9GDnB3IIW&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;556586cd238b3f85459581119519ea809b21a6330b991b2190f5871a97d4075a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""1k59FIX2mud9GDnB3IIW"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
367,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:367},&quot;memo&quot;:{&quot;id&quot;:&quot;96iXv33WioYbafRGaFSa&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;115337cfa06d44f33e49f7559b4f3421897ad014cb7fab8ba874e737bd2dd84d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""96iXv33WioYbafRGaFSa"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
368,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:368},&quot;memo&quot;:{&quot;id&quot;:&quot;Cvqmao7nC8e4ufLQH544&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;93749bcec9cd9477c5279910d4381a620b7fa8bccd5e605103da84b5e55bd114&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Cvqmao7nC8e4ufLQH544"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
369,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:369},&quot;memo&quot;:{&quot;id&quot;:&quot;KrPgTpPd5xHtB2RnP9Qe&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;998e84862c32531f3b5e514f62209a263b3148546eeb170fd2389ab089d5e8ed&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""KrPgTpPd5xHtB2RnP9Qe"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
370,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:370},&quot;memo&quot;:{&quot;id&quot;:&quot;xDrXCyxIe5SgjXLniIHI&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b456f3da3baf416879d1d5994cfc06e40466fc00f4c7b717ed3f418a15887dfa&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""xDrXCyxIe5SgjXLniIHI"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
371,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:371},&quot;memo&quot;:{&quot;id&quot;:&quot;vnacj6VA7jf0WBbRCIeP&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;772964624a7b26ac451d66f07178d4e0510df1371dbd66f84410b3e66504f4ae&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""vnacj6VA7jf0WBbRCIeP"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
372,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:372},&quot;memo&quot;:{&quot;id&quot;:&quot;0gcDaGvmvjYXOuk6251q&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a67f265176005b44d02ef6a0cf530bf5407f01a8746a847d38c8b4505fe1f4a0&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""0gcDaGvmvjYXOuk6251q"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
373,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:373},&quot;memo&quot;:{&quot;id&quot;:&quot;vE657NQyFzI2voWboUVf&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;2f9eb5249fa6184bda9e73c08e2e395f54b851b35bb6e348a42b5807d17256a2&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""vE657NQyFzI2voWboUVf"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
374,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:374},&quot;memo&quot;:{&quot;id&quot;:&quot;bsaMvRprHE8stx5is9WG&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;2c18822193cc87910f67fb3a3c90bc2fb4315109c91fe1e3b337a2bc5dad3b9e&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""bsaMvRprHE8stx5is9WG"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
375,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:2,&quot;max&quot;:2},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:375},&quot;memo&quot;:{&quot;id&quot;:&quot;SR2acOMkjFb8WcLJHQcm&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;20d1c7a04c38925c7630efb0dd6576eb41bac09fcdaab8a0678b8ed423290c51&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""SR2acOMkjFb8WcLJHQcm"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 2; x <= 2; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
376,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:376},&quot;memo&quot;:{&quot;id&quot;:&quot;BhyHvF9t2n1GNyVP1Tlv&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;80d04c49272105d60fc8f2696a3b0c8106d5c23743bbbddc000e79ed60706901&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""BhyHvF9t2n1GNyVP1Tlv"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
377,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:377},&quot;memo&quot;:{&quot;id&quot;:&quot;jVOb5OOKWybPLdirUY3v&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c9e2f3b28d945bf634e4f636be5e7af03f909036cf09258207a58e760a1409d2&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""jVOb5OOKWybPLdirUY3v"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
378,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:378},&quot;memo&quot;:{&quot;id&quot;:&quot;tCHZFGGLfM2AYJ1adIaB&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d88195937a809c502b0a0efd4f9eea81d036cd353cec0556cbcb220f1d0d217c&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""tCHZFGGLfM2AYJ1adIaB"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
379,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:379},&quot;memo&quot;:{&quot;id&quot;:&quot;KovAtPCeg09sVylIJLWT&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;8c8d48dffd1b0f7cde8ba2b4eb8c6e43a00302c749c624f9db8e6e6447080a3e&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""KovAtPCeg09sVylIJLWT"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
380,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:380},&quot;memo&quot;:{&quot;id&quot;:&quot;CIu8ORaZxZ5BLFkqvEcS&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;986035a90dd861b972536c279de6261c2a46d2bddbd2958577af9e0901f01017&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""CIu8ORaZxZ5BLFkqvEcS"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
381,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:381},&quot;memo&quot;:{&quot;id&quot;:&quot;EXBC6C3N1jj9TIbwK8Us&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e2dbb9032af81fa517a4b4903f23ee980e1f092c845dbed9fd96547bb5deb1f4&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""EXBC6C3N1jj9TIbwK8Us"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
382,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:382},&quot;memo&quot;:{&quot;id&quot;:&quot;tCW4joUYQBGbYelZzhKX&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;4e2d9421061e7f7363d899e9056dfa2377afb2f7a6fcac479420fe8f0721e37e&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""tCW4joUYQBGbYelZzhKX"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
383,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:383},&quot;memo&quot;:{&quot;id&quot;:&quot;KRC9RYF2Qv8rG4pjTC48&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;add6fd80c034a7d81f2720d9652898ed1232d8f6f40b924b1430366094fc47af&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""KRC9RYF2Qv8rG4pjTC48"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
384,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:384},&quot;memo&quot;:{&quot;id&quot;:&quot;tH9UP9k23hRVvdPQHCqq&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;772582e8006700be57eb67c5637c1d833c4edb178a74a31287bb50d7d1062d40&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""tH9UP9k23hRVvdPQHCqq"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
385,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:385},&quot;memo&quot;:{&quot;id&quot;:&quot;Pa36ovk98ZOeuOYx01ju&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e42a71b5c847ea1ec8e55f31b14152bf8f46ed1669f44afb21daf99d82cbe41f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Pa36ovk98ZOeuOYx01ju"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
386,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:386},&quot;memo&quot;:{&quot;id&quot;:&quot;Yt0xoCG9lITcQhWCHIH0&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;5b1f5d5a7ec6f1960b056cd63598ce59c0403b9d064719f307ce0ee2bc600776&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Yt0xoCG9lITcQhWCHIH0"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
387,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:387},&quot;memo&quot;:{&quot;id&quot;:&quot;97iIVjIPHhP5k64vULEw&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;5c05a502bfe56c5a6f2c09121111523ebb10db6f7a9d52d6192b953b19bdb6d9&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""97iIVjIPHhP5k64vULEw"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
388,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:388},&quot;memo&quot;:{&quot;id&quot;:&quot;pSmf1MP1q8wrCaWPVdkz&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;0ed34e279daf58485ddcb066c1b2c278448036a58a692d7c0070895a269b0a33&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""pSmf1MP1q8wrCaWPVdkz"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
389,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:389},&quot;memo&quot;:{&quot;id&quot;:&quot;mRA5gWGxZkjJsTip1q9X&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e68667ea42cf9226a46225b765681a0824674a3fb414a0012e281d9e455282bd&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""mRA5gWGxZkjJsTip1q9X"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
390,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:5},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:390},&quot;memo&quot;:{&quot;id&quot;:&quot;TAp64W9SS6Sp9BznXLvY&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e22f78ff0114a63acc1f78f959a9bc9ad6f3e47c63e34a6493e3ec631a83577c&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""TAp64W9SS6Sp9BznXLvY"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 5; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
391,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:8,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:391},&quot;memo&quot;:{&quot;id&quot;:&quot;jsA6xoQC0ZXlGjzlM28z&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ccfc52be2818849d3d44b46957c03328f4a392edfec214ad2813699512cae485&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""jsA6xoQC0ZXlGjzlM28z"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 8; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
392,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:392},&quot;memo&quot;:{&quot;id&quot;:&quot;u8pSOQ1NZCWtMRzFZy0b&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d64d035bf7207483a3527f50c121a8aca4bb5e6f7daeeb0659b7620bad0713f5&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""u8pSOQ1NZCWtMRzFZy0b"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
393,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:393},&quot;memo&quot;:{&quot;id&quot;:&quot;qdAdm7KF2Wd48oAx9bWO&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;54a404b39f2c6b3f9917f74d88646343b94a250a87be866c62557db3fe8ca9ba&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""qdAdm7KF2Wd48oAx9bWO"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
394,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:394},&quot;memo&quot;:{&quot;id&quot;:&quot;HoUmGOek9IT0vVxcuwoR&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;44e0f1a323ce7f386b53748b0c96520ada65af8379d448ea88afd1979d52486e&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""HoUmGOek9IT0vVxcuwoR"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
395,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:395},&quot;memo&quot;:{&quot;id&quot;:&quot;4iyZWneSxHGsJJEx6b1q&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;3705a47d7005db22b0e4541d27aae976a495731ea457aa71eab9b6327ec84f37&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""4iyZWneSxHGsJJEx6b1q"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
396,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:396},&quot;memo&quot;:{&quot;id&quot;:&quot;ydbWXYLvJJCDzyBN5LLV&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;44e3f25cb77faabbfda7ed975fb3acdc6d9f480ddb08b3bfab1a70e098759412&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ydbWXYLvJJCDzyBN5LLV"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
397,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:397},&quot;memo&quot;:{&quot;id&quot;:&quot;pVUMf8VS5EWUpxdlXUOK&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;32ef03a8d74a87203bb6f9441a3a037ed33bd24bf146a31ccbb959f7af4eb2e8&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""pVUMf8VS5EWUpxdlXUOK"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
398,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:398},&quot;memo&quot;:{&quot;id&quot;:&quot;Rw3I5XWAPnS55AoEdOhW&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ce878abf9b911d8ce00e7e2a59f7b9701ee3be62fb313c897a90b955e7979328&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Rw3I5XWAPnS55AoEdOhW"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
399,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:399},&quot;memo&quot;:{&quot;id&quot;:&quot;YZPhQMwA1nY0GK6Y8BVS&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ebe9a07380bce50420bab6ea2c6ee8197e56ab8390ed447b3c2e71770d2d824b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""YZPhQMwA1nY0GK6Y8BVS"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
400,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:400},&quot;memo&quot;:{&quot;id&quot;:&quot;zr4MFU2Lr1daCmsx6IgU&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ffcd308d9ea54417747d13bfc700d88dc9ca6d011b7440152cae837d00e0080f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""zr4MFU2Lr1daCmsx6IgU"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
401,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:401},&quot;memo&quot;:{&quot;id&quot;:&quot;uJ5t52Dfq9LrT9fw2Ib0&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;4fe62f6567f379580a9dbc5d1bcdb6d4860f000e9db27b8eff14f41a4cc21006&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""uJ5t52Dfq9LrT9fw2Ib0"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
402,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:402},&quot;memo&quot;:{&quot;id&quot;:&quot;CQeSNdIottUvT1nCUvYD&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b32422cb1165d22c1f2e1c1d8f2d46d7d67398638f242ede6ff1c9d1352527e1&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""CQeSNdIottUvT1nCUvYD"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
403,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:403},&quot;memo&quot;:{&quot;id&quot;:&quot;KeDOnocc1H8SZGeShS6w&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;edebd3b669c0cde408e7703aa853902e81d12c4d5f1bad733a821cf5290c7b14&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""KeDOnocc1H8SZGeShS6w"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
404,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:404},&quot;memo&quot;:{&quot;id&quot;:&quot;6YTHI4AWXsC7N9r62fJ6&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;42de9abe3efbc4d4d0534f57c083d5a6d3a3c9e786109f29622ab8b85a8d9be0&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""6YTHI4AWXsC7N9r62fJ6"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
405,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:405},&quot;memo&quot;:{&quot;id&quot;:&quot;2cTaAqXP74mQ18Md0bm1&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1eeeef43733277f7c8cf75b293bf6a42587d49f2608764864ae11cf6b8335d85&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""2cTaAqXP74mQ18Md0bm1"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
406,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:406},&quot;memo&quot;:{&quot;id&quot;:&quot;NCi9cJOKGk8TG4WefEaX&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;8f7c1d8088f1e40b6402975d1e69a0a9da61a2da69f70c37c91f613b72910481&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""NCi9cJOKGk8TG4WefEaX"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
407,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:407},&quot;memo&quot;:{&quot;id&quot;:&quot;6jbGdfEMedJj5Fbrqsf5&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;93818ed703f9736c93401c805562b6b6d87929255cf166df88f17e8cd89c0552&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""6jbGdfEMedJj5Fbrqsf5"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
408,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:408},&quot;memo&quot;:{&quot;id&quot;:&quot;DR6B8rbpFucrgej6ygvs&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1425e73ae34a359fecee4e1f1bf897ada65ad86ace16fd523ddf1a0f673bb4c7&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""DR6B8rbpFucrgej6ygvs"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
409,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:409},&quot;memo&quot;:{&quot;id&quot;:&quot;2MZCdJvcuSTIJGc0sULM&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;41a6e818f19e394680150c1338c2dc71d3fa016e48842c3c82e2bb5d3276c628&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""2MZCdJvcuSTIJGc0sULM"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
410,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:2,&quot;max&quot;:11},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:410},&quot;memo&quot;:{&quot;id&quot;:&quot;TVPuSvBIts7QcMYGOnbu&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d51ad7e992761fa7a7e01b5e34669319bbf433f6601b8004bc812a918977ec32&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""TVPuSvBIts7QcMYGOnbu"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 2; x <= 11; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
411,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:2,&quot;max&quot;:10},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:411},&quot;memo&quot;:{&quot;id&quot;:&quot;zVJr2I3gcIVIeydQvnpW&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a527e53b29a5230ff9c0ee2b081f4326958685d26be41c11670130752e8097a1&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""zVJr2I3gcIVIeydQvnpW"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 2; x <= 10; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
412,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:8,&quot;max&quot;:10},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:412},&quot;memo&quot;:{&quot;id&quot;:&quot;0UsNzNbxaIoQetVxa4HV&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;3f7fe8a8a67ef8c2dc697b8949978d92bcf9b5467c103a795fd960e96758cc3e&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""0UsNzNbxaIoQetVxa4HV"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 8; x <= 10; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
413,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:9,&quot;max&quot;:11},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:413},&quot;memo&quot;:{&quot;id&quot;:&quot;KxsANuujzljDTM2J2lhI&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;226f2b6efb15530d6fd676b06401bdda2172f7027fa1ca3c49a576e963d2385c&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""KxsANuujzljDTM2J2lhI"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 9; x <= 11; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
414,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:414},&quot;memo&quot;:{&quot;id&quot;:&quot;SN4Eqfrjqt5sCrTwGMao&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;cf370b5baba56c26d1f839ff499f8dd6e22c1280c15d6d5c46c08770cee46975&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""SN4Eqfrjqt5sCrTwGMao"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
415,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:415},&quot;memo&quot;:{&quot;id&quot;:&quot;A17HTE5am3DjhFDrHBcY&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;2ae1d39e48aa117ba361c936ff8faae6084c1e63f54bcf9d05bea7667ab7260c&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""A17HTE5am3DjhFDrHBcY"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
416,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:416},&quot;memo&quot;:{&quot;id&quot;:&quot;1jdmjyOhC9IjHX4dkbdd&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;781b61d626a52e6ea362b075dc8d61fcda8db03e82589422338a8ef9cb47b6c0&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""1jdmjyOhC9IjHX4dkbdd"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
417,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:417},&quot;memo&quot;:{&quot;id&quot;:&quot;CSbbMG8q1pF9fy43n68k&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b3bfdaf6207c1ebee79a88c3c30a0284ab2b4e0ad86bbb2d7e89c58a6ece2e5d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""CSbbMG8q1pF9fy43n68k"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
418,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:418},&quot;memo&quot;:{&quot;id&quot;:&quot;Rzv5VaCVakowbpQt6dK4&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;591745ae80faef262ef23e492c0214441274f0e5aca9b0fd0d94cd4b8c66c249&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Rzv5VaCVakowbpQt6dK4"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
419,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:419},&quot;memo&quot;:{&quot;id&quot;:&quot;O07Y1pQHZJNZCDzVs8Ti&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;acbf99b3e923c4958e3477afc4f9beffe4b33a7a9afea28ced4c00a1f228c959&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""O07Y1pQHZJNZCDzVs8Ti"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
420,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:420},&quot;memo&quot;:{&quot;id&quot;:&quot;t8q0iT00oCkO4FJo1mOf&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;2e8229f7f2d53ed180173ff8087458a05c4b8372222836363073ede07aa45c86&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""t8q0iT00oCkO4FJo1mOf"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
421,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:421},&quot;memo&quot;:{&quot;id&quot;:&quot;FRZytm9MV5DDCrzfygYS&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ae0b1b330fa2b03fd80386522ace0744d52d7e0908f4508e302e2628737449d0&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""FRZytm9MV5DDCrzfygYS"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
422,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:422},&quot;memo&quot;:{&quot;id&quot;:&quot;mz5YSp7TDU2BkKtEJM7Y&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a6c516cff120abeb24460bacd20b08b0178fb9be620b240f167dd9c387580c24&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""mz5YSp7TDU2BkKtEJM7Y"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
423,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:6},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:423},&quot;memo&quot;:{&quot;id&quot;:&quot;2u9aquJaPFfoNWnEMNfB&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;708b1e3d442eed525897916f15320d804a6c3bb360d5b3d74555d56975eb035b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""2u9aquJaPFfoNWnEMNfB"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 6; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
424,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:424},&quot;memo&quot;:{&quot;id&quot;:&quot;hMDXD1ZkPp18xwwytxH7&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;aea3d560cca5f1734a69043ef7eb5fae1b5cdb5c794e821d60f923e65a659a3a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""hMDXD1ZkPp18xwwytxH7"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
425,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:9,&quot;max&quot;:10},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:425},&quot;memo&quot;:{&quot;id&quot;:&quot;SIjHb4VTHhdpkFNCxNML&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;778c4cc326ade118ccf311f55ef16fdbedd565d0ed270fbec5806f5dfea10f2f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""SIjHb4VTHhdpkFNCxNML"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 9; x <= 10; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
426,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:9,&quot;max&quot;:10},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:426},&quot;memo&quot;:{&quot;id&quot;:&quot;vRFFteRi2M02lMRuNzy9&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7af3dcfa3f285358ae1559cf308f120e29b98d0200e346f303f1c33ec76ef3d5&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""vRFFteRi2M02lMRuNzy9"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 9; x <= 10; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
427,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:9,&quot;max&quot;:10},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:427},&quot;memo&quot;:{&quot;id&quot;:&quot;xF0co4xztEWfxYirhXvc&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;527331188e01d004ad01e2a9abc24309c649925cfcd937797598d363ac43f146&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""xF0co4xztEWfxYirhXvc"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 9; x <= 10; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
428,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:9,&quot;max&quot;:12},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:428},&quot;memo&quot;:{&quot;id&quot;:&quot;acWRDcyGU5K0zNBThigP&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;48a71fc9f751030a787a3c57c35351d45d5d01317b9c81379d57090f6e045fe3&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""acWRDcyGU5K0zNBThigP"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 9; x <= 12; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
429,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:9,&quot;max&quot;:11},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:429},&quot;memo&quot;:{&quot;id&quot;:&quot;efyaVJ8EXDPCisY2hWii&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;3f4f3a77e466dd4a3d7273f045da8f002ca72d4896e589e2cf92ef5a4fe76661&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""efyaVJ8EXDPCisY2hWii"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 9; x <= 11; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
430,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:10,&quot;max&quot;:11},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:430},&quot;memo&quot;:{&quot;id&quot;:&quot;HsfiSEd2xb56sgfpelxa&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;36d83f88d6df87087be353b7468ddc86928c5679f27cf44b633af887c37b2f50&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""HsfiSEd2xb56sgfpelxa"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 10; x <= 11; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
431,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:9,&quot;max&quot;:11},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:431},&quot;memo&quot;:{&quot;id&quot;:&quot;j7tfJ0WvVzXxZEmNUkGC&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;760901760722a4a56934e14f4aea8008d909ce1200375571802ab7a8e287d2f4&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""j7tfJ0WvVzXxZEmNUkGC"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 9; x <= 11; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
432,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:432},&quot;memo&quot;:{&quot;id&quot;:&quot;KUiObu6cmjtH6C4TdfjJ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1b40861ecca9213998a1e0d83c69ecb773f844e2992824946c9bbad4e9342e66&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""KUiObu6cmjtH6C4TdfjJ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
433,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:10,&quot;max&quot;:11},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:433},&quot;memo&quot;:{&quot;id&quot;:&quot;u9nHrQMiu5l5ljUrTx9S&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;2085947062addb23a215d067a410f3a57de7c798cd403fa8204c39b11dd2e925&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""u9nHrQMiu5l5ljUrTx9S"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 10; x <= 11; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
434,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:10,&quot;max&quot;:11},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:434},&quot;memo&quot;:{&quot;id&quot;:&quot;HSVlS6qEzQkJKPD8QA2p&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;526b2bd8199ef3dde8674163adff38faf82b894f96f9d61af58dc43e7a930d49&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""HSVlS6qEzQkJKPD8QA2p"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 10; x <= 11; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
435,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:435},&quot;memo&quot;:{&quot;id&quot;:&quot;fN8gGjqWKSnH1kxnoQdY&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d0dc59fff5f4f2992c99a0bbf01d7f903805e1818a0fba00390665ecf299210f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""fN8gGjqWKSnH1kxnoQdY"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
436,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:10},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:436},&quot;memo&quot;:{&quot;id&quot;:&quot;R94yMQBl3uW590HPQYpc&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;357108afd7dc11926c3d2386eaf92bd3cd375fb7f088558071d090c97c72df8a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""R94yMQBl3uW590HPQYpc"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 10; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
437,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:10},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:437},&quot;memo&quot;:{&quot;id&quot;:&quot;k5mQasigtj8BdHcJJQFz&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d901cc085f8ca1ada1d12cad96f02303ddd771dc19163c92f8eaa95a93016ca6&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""k5mQasigtj8BdHcJJQFz"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 10; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
438,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:10},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:438},&quot;memo&quot;:{&quot;id&quot;:&quot;KrldbjtdrGr9RBCplQLV&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7393d35048f995f53fede2f2370691290acc40a6ff064cbc0b148eb5ff8ee4c0&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""KrldbjtdrGr9RBCplQLV"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 10; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
439,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:10},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:439},&quot;memo&quot;:{&quot;id&quot;:&quot;VaQSJI2ja2HFamfsPfCW&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a51a7b309710dd53324b8d2e2a8d3cf66f3ac4acd342a24130ac70fe64bcde97&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""VaQSJI2ja2HFamfsPfCW"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 10; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
440,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:7,&quot;max&quot;:10},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:440},&quot;memo&quot;:{&quot;id&quot;:&quot;VIEsoXLqHbz7OvkTWiP4&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c2b03f0b1c68769034eeddf5b91cbd81c6366fef6db3b10774855a71d58f166f&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""VIEsoXLqHbz7OvkTWiP4"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 7; x <= 10; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
441,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:441},&quot;memo&quot;:{&quot;id&quot;:&quot;PVpEQ37NgFYGtN5iKl6t&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;47d9f53971850d1014a4f3c8d124cae03506871ede528ec66163577958608cec&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""PVpEQ37NgFYGtN5iKl6t"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
442,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:10},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:442},&quot;memo&quot;:{&quot;id&quot;:&quot;nVLZvFRkmnbk7289IVGi&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;29343e6fa9d1fcaf72015ff0a3ad3bd7c439597151ecff67fac9d0814371b5bd&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""nVLZvFRkmnbk7289IVGi"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 10; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
443,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:8,&quot;max&quot;:10},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:443},&quot;memo&quot;:{&quot;id&quot;:&quot;VHTOPJlhp03TlIcqbksu&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;3547079e7cea11fa07571aa1d67d7887f27c9fa8453a79334d40a4709f0ac071&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""VHTOPJlhp03TlIcqbksu"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 8; x <= 10; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
444,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:444},&quot;memo&quot;:{&quot;id&quot;:&quot;QlKwAIdGTK75RlGonULa&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;511cd1e38a0941fcb1d389828f639ec4354cf591233cd7be22977f9c958e17cc&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""QlKwAIdGTK75RlGonULa"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
445,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:445},&quot;memo&quot;:{&quot;id&quot;:&quot;o3yc1VfMkArypILpB7pz&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;106790dd6b22461102e495c2cfe664dd973e02611e8df9ebc9659cd1d339405e&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""o3yc1VfMkArypILpB7pz"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
446,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:446},&quot;memo&quot;:{&quot;id&quot;:&quot;CFdD60xeelBaKah9VcUY&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;60114df6458e70451c69cc0f3d3a8ded471100c2721bf374cc8b27a8772ebc89&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""CFdD60xeelBaKah9VcUY"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
447,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:447},&quot;memo&quot;:{&quot;id&quot;:&quot;ObidkTtLVAhSLUvlD48Q&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;982c2071537eacad4c455768c66a3edbf4c01b98e48779785c7f8f519758710d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ObidkTtLVAhSLUvlD48Q"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
448,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:448},&quot;memo&quot;:{&quot;id&quot;:&quot;SpsOY4Xxa6rL3zkVrNVU&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d8e0c8212c93a1ac262ec0dae1c5dca657b2d6df95d85ca18cc527bb1e669e28&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""SpsOY4Xxa6rL3zkVrNVU"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
449,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:449},&quot;memo&quot;:{&quot;id&quot;:&quot;AyLAZYsujOeZjXtxASNX&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;74825656015ad17e10dd0f55b0e6ca05427b4071ec14ea582507899d0511c321&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""AyLAZYsujOeZjXtxASNX"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
450,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:450},&quot;memo&quot;:{&quot;id&quot;:&quot;OFQ62EYBR6qoMW3Uijc8&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;8517727c6490b033dbf6ab5eb8ccd9a63fc17fe1ca1c3529d30803700ac910b8&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""OFQ62EYBR6qoMW3Uijc8"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
451,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:451},&quot;memo&quot;:{&quot;id&quot;:&quot;bbVjrp4rUQuEttx48POt&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;148d36e1464d5c380a357201a278a095f792776a271ac225caf71450716279a4&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""bbVjrp4rUQuEttx48POt"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
452,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:6,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:452},&quot;memo&quot;:{&quot;id&quot;:&quot;R84tn7asZWSb7U2cyTyw&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;cdcc2e7f4396d659ca9496951fbc9c70863d70a8b570b87a3cedb57a8897a304&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""R84tn7asZWSb7U2cyTyw"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 6; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
453,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:453},&quot;memo&quot;:{&quot;id&quot;:&quot;ZJB06mSVeuOq30Zsylb6&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;415682d3a5d673f74b9001adfa637c96aeb3fca3b6c4c69faeb5af5a3adb2fdc&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ZJB06mSVeuOq30Zsylb6"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
454,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:454},&quot;memo&quot;:{&quot;id&quot;:&quot;5Hvpq2kr2wRskuhDSGhj&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;5a7150f06fcb15e888ccbbef026207a271612389a71f97f775afa4cf5b0230aa&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""5Hvpq2kr2wRskuhDSGhj"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
455,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:7},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:455},&quot;memo&quot;:{&quot;id&quot;:&quot;X9tLgEVYIixKf0WRUVoB&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;55d4ead45f8ef1c1d1ea42df9c0ddecb5052dc93ca5baabc9bbc2a1c6d65a802&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""X9tLgEVYIixKf0WRUVoB"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 7; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
456,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:456},&quot;memo&quot;:{&quot;id&quot;:&quot;X9hR1QlcHI8VfysIq1Tn&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;59fd3565110da1f8d048d6ca6cbd36275dc927a4c23c34d166a92a32d715a2b0&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""X9hR1QlcHI8VfysIq1Tn"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
457,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:457},&quot;memo&quot;:{&quot;id&quot;:&quot;G6CDa24TsrCLaQxb6VY1&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;737889191b25f8d015afc7d3b42f1e49db648c9c3557a4695e9d25da24ac0aae&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""G6CDa24TsrCLaQxb6VY1"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
458,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:458},&quot;memo&quot;:{&quot;id&quot;:&quot;2QqXVGa7mPpcMHQgTBIG&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;457c61b1178c43492588733f83f7f95799d2f83b8d379ec71077044074b8f775&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""2QqXVGa7mPpcMHQgTBIG"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
459,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:459},&quot;memo&quot;:{&quot;id&quot;:&quot;yOakL57zfs26TWf3KsuB&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;0542d992ee4789c29ba4cb30c01cff0c6f5660b856eb212b6ad831b868a92c30&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""yOakL57zfs26TWf3KsuB"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
460,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:460},&quot;memo&quot;:{&quot;id&quot;:&quot;888tuHK3jYXi5JdsV1oA&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;06a37130125464830e53eec234b68646063253bea45ed80f58a8d80d752a8a50&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""888tuHK3jYXi5JdsV1oA"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
461,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:461},&quot;memo&quot;:{&quot;id&quot;:&quot;4nnv0V8sIn3UyAh3OKKh&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c57bdfec00d54ae0fd5ee1f26eab648618009fcceb55ee9d21b3f3280111e71e&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""4nnv0V8sIn3UyAh3OKKh"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
462,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:462},&quot;memo&quot;:{&quot;id&quot;:&quot;8ppd7ATxTxBoOyphqo8r&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;7c77f81037b2ce657fc7f083eeda32ba21e3a1ea98870e66011f7536a51ff7fb&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""8ppd7ATxTxBoOyphqo8r"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
463,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:463},&quot;memo&quot;:{&quot;id&quot;:&quot;9PkD7nHeVhwxXD8O8kkO&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;04ee5873dc5543156d5410adb40cc8faf2df21ed63c17cf0e13f5b931eab876a&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""9PkD7nHeVhwxXD8O8kkO"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
464,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:464},&quot;memo&quot;:{&quot;id&quot;:&quot;iMvxE0GJUZ1z1PK4zEEM&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;87d4531e995cd40f6857361002e76d4218854f45bd1aa95103e0cb157570efb7&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""iMvxE0GJUZ1z1PK4zEEM"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
465,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:465},&quot;memo&quot;:{&quot;id&quot;:&quot;4ARxkoNzffITjxmHsmfu&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;5811fe6e7e87a6d09bd7a5ece775e2f1f9b81dee7c575261e8c4f6e234186ba6&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""4ARxkoNzffITjxmHsmfu"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
466,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:466},&quot;memo&quot;:{&quot;id&quot;:&quot;ZYdUWpGFmCE1houoeOqH&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;529e09887ca325f71eaaca43a177e5e008bcc14560f0c72b17ca9907d7bc3e09&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ZYdUWpGFmCE1houoeOqH"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
467,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:467},&quot;memo&quot;:{&quot;id&quot;:&quot;ULr6znoG36MeHrQIEFyf&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;b4a6c68a580c6516dbbe165363c3e73b1acf8d403d9b731e49ef1d7bf6ae3256&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ULr6znoG36MeHrQIEFyf"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
468,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:4},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:468},&quot;memo&quot;:{&quot;id&quot;:&quot;vZFKEpUiul8UwIyTCucQ&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;c13ce6696022f34c5c1241d0940ccf1afe0cf87727ba085479f80eddf60f3535&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""vZFKEpUiul8UwIyTCucQ"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 4; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
469,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:3},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:469},&quot;memo&quot;:{&quot;id&quot;:&quot;J39UlM4z178YVB0s7m2u&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;44fa064eccb18fcd49b8f125935d298f3ecf7300212bba2f598ae42e2034c735&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""J39UlM4z178YVB0s7m2u"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 3; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
470,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:4,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:470},&quot;memo&quot;:{&quot;id&quot;:&quot;ly2N3u29vZdeH5CWb96u&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;39cb69babee01d0965c5786ee991a952805cb7a74daed1f25343a619fd498975&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ly2N3u29vZdeH5CWb96u"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 4; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
471,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:471},&quot;memo&quot;:{&quot;id&quot;:&quot;rxhsZqwpZBzWeN3jIAfv&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;44db0d3a0e457b3686668d80aaea7b42e75d36d7b3e0bbbc70e36c0765c7ffec&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""rxhsZqwpZBzWeN3jIAfv"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
472,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:472},&quot;memo&quot;:{&quot;id&quot;:&quot;7X6qK3XSP1p8EEx40ugU&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;d39999ee461be67e072c26fc3316f2961f55d958fbe11befc8502509d364cb03&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""7X6qK3XSP1p8EEx40ugU"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
473,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:473},&quot;memo&quot;:{&quot;id&quot;:&quot;izCZ9BQLHidfQNJUxrrR&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;86e987a026c9d43e105a4aa7c2841571232a1e419ca45f662f37b6c81f8d831e&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""izCZ9BQLHidfQNJUxrrR"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
474,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:474},&quot;memo&quot;:{&quot;id&quot;:&quot;TuOAVq9aN6BVeEH9M7AV&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;f848d2e9abb6dc3523671c174020008ba90bf582702c0eaaf026fec4780c21d0&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""TuOAVq9aN6BVeEH9M7AV"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
475,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:475},&quot;memo&quot;:{&quot;id&quot;:&quot;ZlrHO1A0GPAjEeHzhkty&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ae26c5ef656bba880b104a9b5bb0407d900d16286c2792e8209c085a02c59b6c&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ZlrHO1A0GPAjEeHzhkty"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
476,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:476},&quot;memo&quot;:{&quot;id&quot;:&quot;Kv021l9StKhhZNwmjedS&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;5c604ba782d996719f1a8199f07260f92f4679b2c949ea7cf2aaa16cf1745b81&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Kv021l9StKhhZNwmjedS"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
477,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:477},&quot;memo&quot;:{&quot;id&quot;:&quot;ZKRrzz8jNrf7ny6Fhqqz&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;9f2f6a69a441fd158019a3dd613b53981f66b0cb93ad38452413c3e234acf1e8&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ZKRrzz8jNrf7ny6Fhqqz"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
478,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:478},&quot;memo&quot;:{&quot;id&quot;:&quot;MlQvIZimDGhJVYYLnWcM&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;5d45b3773f0eaa18834b43318de60ecf2669a9b22616367391718d167705d575&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""MlQvIZimDGhJVYYLnWcM"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
479,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:479},&quot;memo&quot;:{&quot;id&quot;:&quot;w9VOTR854Ob6oC23JIes&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;26134212b8a124fa323f65df559bad2d747019335ea93a966b3fae452864be19&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""w9VOTR854Ob6oC23JIes"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
480,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:480},&quot;memo&quot;:{&quot;id&quot;:&quot;UvqERq4R0FEfX79ev4iB&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;793db362cc0f0613b4578387ffb908c227ccc8db7f81eff1b2123b2b593863a8&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""UvqERq4R0FEfX79ev4iB"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
481,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:481},&quot;memo&quot;:{&quot;id&quot;:&quot;G8dFZcxXLl4WpHi2Ky7i&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;fcefa55d72a5f09aa399adc694d78e50872461889a0783acaa0dee2462c77ea6&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""G8dFZcxXLl4WpHi2Ky7i"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
482,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:482},&quot;memo&quot;:{&quot;id&quot;:&quot;Kfe6bl0vTJzm072Kzi2Z&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a1a32839745e5406e86dea6944bb46191d59872e1b9515e3cbd028c41fb816de&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""Kfe6bl0vTJzm072Kzi2Z"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
483,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:483},&quot;memo&quot;:{&quot;id&quot;:&quot;2SBiULXG1BHCWvyVSR3d&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;10ca1e85039c24c03899008c17400afeea17013758863eed7379b25130efb27d&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""2SBiULXG1BHCWvyVSR3d"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
484,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:484},&quot;memo&quot;:{&quot;id&quot;:&quot;eQ9Y64hJLTQ58ENbP5T9&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e559e964e83540b3e8c87b7617096d770d1692b12f0e9baa397de76237657df4&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""eQ9Y64hJLTQ58ENbP5T9"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
485,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:485},&quot;memo&quot;:{&quot;id&quot;:&quot;hdmpbRmK1OQvP8DQU0Zw&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;abac142319b51bb7fb47b8766c3682e4ef77c28acbfaaedf055a3df2de5a529b&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""hdmpbRmK1OQvP8DQU0Zw"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
486,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:486},&quot;memo&quot;:{&quot;id&quot;:&quot;XUmW8UgOK0mZ7MTI6i7w&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;e5750185cf6fff92584c11552c18b21a32c9cf0553373db08c7905ac0fda3339&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""XUmW8UgOK0mZ7MTI6i7w"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
487,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:487},&quot;memo&quot;:{&quot;id&quot;:&quot;7KcxdaX0lARGQV1x24eO&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;6ce607ead2b6aafc92991ad9321b9b43fc6adc1aa2afe4e5b526231ca6248268&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""7KcxdaX0lARGQV1x24eO"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
488,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:488},&quot;memo&quot;:{&quot;id&quot;:&quot;oYNj46yFgd3IdPLVlkkh&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;4ca236a62489cb463869803abd9679e7094b348313f404a708b33a9508fad9f3&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""oYNj46yFgd3IdPLVlkkh"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
489,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:489},&quot;memo&quot;:{&quot;id&quot;:&quot;kZcmkHzu0VB2URYLWqFm&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a180e233fcbe154f2e3dcccef2a2a8f853ea07ed7ba0ab026edf2b50cb579841&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""kZcmkHzu0VB2URYLWqFm"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
490,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:490},&quot;memo&quot;:{&quot;id&quot;:&quot;2Njdxd8u6xjtbPKQbkxf&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ab9ffea23404978bb0d72a486d50971bef4c73285e11fb5538dbd4eb0dabda4c&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""2Njdxd8u6xjtbPKQbkxf"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
491,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:491},&quot;memo&quot;:{&quot;id&quot;:&quot;xiETIXvWAk9pUCD7p6Qn&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;ba38bb04b2000c36675e15ea7889d72e44ffeaa357c50f466a890ecdc8074335&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""xiETIXvWAk9pUCD7p6Qn"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
492,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:3,&quot;max&quot;:9},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:492},&quot;memo&quot;:{&quot;id&quot;:&quot;lYUNDkLq7C6XJLQYQopA&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;1520fe67142a23b811062043fb39b3caec049e018093d10111996db5033d76f8&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""lYUNDkLq7C6XJLQYQopA"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 3; x <= 9; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
493,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:493},&quot;memo&quot;:{&quot;id&quot;:&quot;ldj6p3c0YBXpYmTHVAik&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;34a5ef1b61573df4cf9a15685f41023bc4fa4b5bb3eceb425dd4da16651aaf50&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""ldj6p3c0YBXpYmTHVAik"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
494,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:494},&quot;memo&quot;:{&quot;id&quot;:&quot;nQTG1n1LdibvhHmaQVk7&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;046dc58b2fe857516e7169f9d9945544506e3a1be5c96e5c0be3461e944a1c12&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""nQTG1n1LdibvhHmaQVk7"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
495,"<!DOCTYPE html>
<html lang=""en"">
    <head>

        <!-- 60 -->
        
        <meta name=""robots"" content=""noindex, nofollow"">

        <!-- Livewire Styles --><style >[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>

        <!-- Script -->
        <script >window.Wireui = {cache: {},hook(hook, callback) {window.addEventListener(`wireui:${hook}`, () => callback())},dispatchHook(hook) {window.dispatchEvent(new Event(`wireui:${hook}`))}}</script>
<script src=""https://perenual.com/wireui/assets/scripts?id=5dda7be9cac61c5885776c4a03411770"" defer ></script>

        <link rel=""preload"" as=""style"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" /><link rel=""modulepreload"" href=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" /><link rel=""stylesheet"" href=""https://perenual.com/build/assets/app-Dy9tYsF4.css"" data-navigate-track=""reload"" /><script type=""module"" src=""https://perenual.com/build/assets/app-Xaw6OIO1.js"" data-navigate-track=""reload""></script>
<script>
     window.addEventListener('load', () => window.setTimeout(() => {
        const makeLink = (asset) => {
            const link = document.createElement('link')

            Object.keys(asset).forEach((attribute) => {
                link.setAttribute(attribute, asset[attribute])
            })

            return link
        }

        const loadNext = (assets, count) => window.setTimeout(() => {
            if (count > assets.length) {
                count = assets.length

                if (count === 0) {
                    return
                }
            }

            const fragment = new DocumentFragment

            while (count > 0) {
                const link = makeLink(assets.shift())
                fragment.append(link)
                count--

                if (assets.length) {
                    link.onload = () => loadNext(assets, 1)
                    link.onerror = () => loadNext(assets, 1)
                }
            }

            document.head.append(fragment)
        })

        loadNext([], 3)
    }))
</script>
    </head>
    
    <div>
        <div wire:snapshot=""{&quot;data&quot;:{&quot;zone&quot;:[{&quot;min&quot;:5,&quot;max&quot;:8},{&quot;s&quot;:&quot;arr&quot;}],&quot;size&quot;:&quot;lg&quot;,&quot;species_id&quot;:495},&quot;memo&quot;:{&quot;id&quot;:&quot;3suwZ5WGCzlUhZMHdRUY&quot;,&quot;name&quot;:&quot;hardiness.map&quot;,&quot;path&quot;:&quot;api\/hardiness-map&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;en&quot;},&quot;checksum&quot;:&quot;a786bd4476939cf68dd59da2e1a71b71751c641716df431602d86e57e918145e&quot;}"" wire:effects=""{&quot;url&quot;:{&quot;species_id&quot;:{&quot;as&quot;:&quot;species_id&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:&quot;&quot;}}}"" wire:id=""3suwZ5WGCzlUhZMHdRUY"" class=""relative"">
    
    <canvas id=""myCanvas"" style=""width: 100%; height: 100%;""></canvas>

    <script>

        // Get the canvas element from the HTML
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Load the first image using the Image object to get its size
        const firstImageUrl = ""https://perenual.com/storage/image/hardiness/lg/0.png"";
        const firstImage = new Image();
        firstImage.onload = () => {
            // Set the canvas size to match the first image's size
            canvas.width = firstImage.width;
            canvas.height = firstImage.height;

            // Load the rest of the images and draw them onto the canvas
            const imageUrls = [""https://perenual.com/storage/image/hardiness/lg/0.png""];

            for (var x = 5; x <= 8; x++) {
                const url = ""https://perenual.com/storage/image/hardiness/lg/"" + x + "".png"";
                imageUrls.push(url);
            }

            for (let i = 0; i < imageUrls.length; i++) {
                const img = new Image();
                img.onload = () => {
                  // Set the global alpha value to 0.8 for all layers except for 0.png
                  if (i > 0) {
                    ctx.globalAlpha = 0.8;
                  }
                  ctx.drawImage(img, 0, 0);
                  // Reset the global alpha value to 1.0 for the next layer
                  ctx.globalAlpha = 1.0;
                };
                img.src = imageUrls[i];
              }
            };
            firstImage.src = firstImageUrl;

    </script>
</div>    </div>

<!-- Livewire Scripts -->
<script src=""/livewire/livewire.js?id=951e6947""   data-csrf="""" data-update-uri=""/livewire/update"" data-navigate-once=""true""></script>
</html>

"
